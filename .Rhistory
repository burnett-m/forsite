pDir <- readClipboard()
setwd(pDir)
pDir
lazFiles <- list.files()
lazFiles
lazFiles <- list.files(pattern="*.laz")
lazFiles
l <- lazFiles[1]
ll <- readLAS(l)
unique(ll$Classification)
for(l in lazFiles){reclassifyLAZ(l)}
pDir <- readClipboard()
setwd(pDifr)
setwd(pDir)
files <- list.files()
files
file.rename(files,gsub("HQ_grow_","",files))
shpClasses <- c('.shp','.prj','.dbf','.shx','.cpg')
c <- shpClasses[1]
list.files(pattern=pasteo("*",c))
list.files(pattern=paste0("*",c))
temp_files <- list.files(pattern=paste0("*",c))
for(c in shpClasses){
temp_files <- list.files(pattern=paste0("*",c))
file.rename(temp_files,gsub(c,paste0("InitialShapes",c)))
}
for(c in shpClasses){
temp_files <- list.files(pattern=paste0("*",c))
file.rename(temp_files,gsub(c,paste0("InitialShapes",c),temp_files))
}
pDir <- readClipboard()
setwd(pDir)
files <- list.files()
# Get rid of the suffix
file.rename(files,gsub("HQ_","",files))
# Add initialShapes into the suffix
shpClasses <- c('.shp','.prj','.dbf','.shx','.cpg')
for(c in shpClasses){
temp_files <- list.files(pattern=paste0("*",c))
file.rename(temp_files,gsub(c,paste0("InitialShapes",c),temp_files))
}
pDir <- readClipboard()
setwd(pDir)
files <- list.files()
# Get rid of the prefix
file.rename(files,gsub("HQ_","",files))
# Add initialShapes into the suffix
shpClasses <- c('.shp','.prj','.dbf','.shx','.cpg')
for(c in shpClasses){
temp_files <- list.files(pattern=paste0("*",c))
file.rename(temp_files,gsub(c,paste0("InitialShapes",c),temp_files))
}
pDir <- readClipboard()
setwd(pDir)
files <- list.files()
# Get rid of the prefix
file.rename(files,gsub("HQ_","",files))
# Add initialShapes into the suffix
shpClasses <- c('.shp','.prj','.dbf','.shx','.cpg')
for(c in shpClasses){
temp_files <- list.files(pattern=paste0("*",c))
file.rename(temp_files,gsub(c,paste0("InitialShapes",c),temp_files))
}
#### Produce DEM
library(lidR)
lazDir <- readClipboard()
setwd(lazDir)
lazCat <- readLAScatalog(".")
plot(lazCat)
dem <- rasterize_terrain(lazCat,res=1,algorithm = tin())
# Load necessary libraries
library(terra)
readClipboard()
writeRaster(dem,"C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Fugro Land USA\\Hydro Quebec\\Health_analysis\\DEM.tif")
# Load necessary libraries
library(terra)
library(sf)
# Load the raster file
raster_file <- "C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Fugro Land USA\\Hydro Quebec\\Health_analysis\\DEM.tif"  # Replace with your raster file path
raster_data <- rast(raster_file)
readClipboard()
# Load the point shapefile
shapefile_path <- "C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Fugro Land USA\\Hydro Quebec\\Buildings\\Montreal_Dec3_FC_41_Tile_Building_Shp\\Montreal_Dec3_FC_41_Tile_Building_Outline.shp"
polygons <- st_read(shapefile_path)
points <- st_centroid(polygons)
# Ensure the points are in the same projection as the raster
points <- st_transform(points, crs = crs(raster_data))
# Extract raster values for each point
raster_values <- extract(raster_data, points)
colnames(raster_values)
# Add the raster values as a new column in the points data frame
polygons$DEM <- raster_values$Z
# Optionally, save the updated shapefile with the raster values
st_write(polygons,gsub(".shp","_withDEM.shp",shapefile_path),layer_options = "SHPT=POLYGONZ")  # Replace with desired save path
# Load the raster file
raster_file <- "C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Fugro Land USA\\Hydro Quebec\\Health_analysis\\DEM.tif"  # Replace with your raster file path
raster_data <- rast(raster_file)
# Load the point shapefile
shapefile_path <- "C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Fugro Land USA\\Hydro Quebec\\Buildings\\Montreal_Dec3_FC_41_Tile_Building_Shp\\Montreal_Dec3_FC_41_Tile_Building_Outline.shp"
polygons <- st_read(shapefile_path)
st_crs(raster_data)
points <- st_centroid(polygons)
raster_data <- st_transform(raster_data,crs=crs(points))
# Ensure the points are in the same projection as the raster
points <- st_transform(points, crs = crs(raster_data))
# Extract raster values for each point
raster_values <- extract(raster_data, points)
# Add the raster values as a new column in the points data frame
polygons$DEM <- raster_values$Z
# Optionally, save the updated shapefile with the raster values
st_write(polygons,gsub(".shp","_withDEM.shp",shapefile_path),layer_options = "SHPT=POLYGONZ")  # Replace with desired save path
pDir <- readClipboard()
setwd(pDir)
files <- list.files()
# Get rid of the prefix
file.rename(files,gsub("HQ_","",files))
# Add initialShapes into the suffix
shpClasses <- c('.shp','.prj','.dbf','.shx','.cpg')
for(c in shpClasses){
temp_files <- list.files(pattern=paste0("*",c))
file.rename(temp_files,gsub(c,paste0("InitialShapes",c),temp_files))
}
#### Produce DEM
library(lidR)
lazDir <- readClipboard()
setwd(lazDir)
lazCat <- readLAScatalog(".")
plot(lazCat)
dem <- rasterize_terrain(lazCat,res=1,algorithm = tin())
writeRaster(dem,"C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Fugro Land USA\\Hydro Quebec\\Health_analysis\\DEM_full.tif")
library(sf)
powerline <- read_sf(readClipboard())
View(powerline)
powerline <- read_sf(readClipboard())
View(powerline)
powerline$HEIGHT <- as.numeric(powerline$PIN_ELEV)
powerline$HEIGHT <- as.numeric(gsub(" m","",powerline$PIN_ELEV))
mean(powerline$HEIGHT)
mean(powerline$HEIGHT,na.rm=T)
points <- powerline
# Extract raster values for each point
raster_values <- extract(raster_data, points)
points$DEM <- raster_values$Z
View(points)
points$PWRLINE_HEIGHT <- points$HEIGHT - points$DEM
mean(points$PWRLINE_HEIGHT,na.rm=T)
hist(points$PWRLINE_HEIGHT)
?hist
hist(points$PWRLINE_HEIGHT,xlab='Powerline Heights',main = "Power Poles Heights Histogram")
readClipboard()
las <- readLAS(readClipboard())
max(las$Intensity)
hist(las$Intensity)
sum(las$Intensity > 255)
hist(las$Intensity > 255)
a <- las[las$Intensity > 255]
hist(a)
hist(a$Intensity)
hist
?hist
las <- readLAS(readClipboard())
max(las$Intensity)
lasDir <- readClipboard()
las <- readLAScatalog(lasDir)
polyList <- read.csv("C:\Users\MichaelBurnett\Downloads\highint4_1000pts_over_500int.txt",sep=",")
readClipboard()
polyList <- read.csv("C:\\Users\\MichaelBurnett\\Downloads\\highint4_1000pts_over_500int.txt",sep=",")
library(foreign)
agtDBF <- read.dbf(readClipboard())
polyList <- read.csv("C:\\Users\\MichaelBurnett\\Downloads\\highint4_1000pts_over_500int.txt",sep=",")
agtDBF <- read.dbf(readClipboard())
View(agtDBF)
View(polyList)
agt_int <- agtDBF[agtDBF$STANDID %in% polyList$las]
agt_int <- agtDBF[agtDBF$STANDID %in% polyList$las,]
View(agt_int)
View(polyList)
sum(agt_int$SPECIES == "SN")
vaDBF <- read.dbf(readClipboard())
va_int <- vaDBF[vaDBF$STANDID %in% polyList$las,]
sum(va_int$SPECIES == "SN")
sum(va_int$SPECIES == "CD")
View(va_int)
unique(va_int$VA_ID2)
agt_int <- agtDBF[!agtDBF$STANDID %in% polyList$las,]
library(foreign) ; library(sf)
#### Check AGT -99999 values
library(lidR)
setwd(readClipboard())
files <- list.files()
files
las <- readLAS(files[3])
shp <- read_sf(files[9])
i <- 1
temp_shp <- shp[i]
temp_shp <- shp[i,]
st_crs(las)
st_crs(las) == st_crs(shp)
las <- st_transform(las,st_crs(shp))
temp_shp <- shp[i,]
temp_las <- clip_roi(las,temp_shp)
plot(temp_las)
las <- readLAS(files[3])
temp_las <- clip_roi(las,temp_shp)
st_transform(las,st_crs(shp))
temp_las <- clip_roi(las,temp_shp)
st_crs(las) <- st_crs(shp)
temp_las <- clip_roi(las,temp_shp)
plot(temp_las)
i <- 2
temp_shp <- shp[i,]
temp_las <- clip_roi(las,temp_shp)
temp_las <- clip_polygon(las,temp_shp)
?cliproi
?clip_roi
st_bbox(shp)
st_bbox(las)
View(temp_shp)
shp <- st_zm(shp)
temp_las <- clip_polygon(las,temp_shp)
temp_las <- clip_roi(las,temp_shp)
?st_zm
temp_shp <- shp[i,]
temp_las <- clip_roi(las,temp_shp)
plot(temp_las)
print(paste0("There are ",sum(temp_las$Classification == 1)," non-ground stems"))
print(paste0("There are ",sum(temp_las$Classification == )," non-ground stems"))
print(paste0("There are ",sum(temp_las$Classification == 0)," non-ground stems"))
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems"))
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
for(i in c(1:nrow(shp))){
temp_shp <- shp[i,]
temp_las <- clip_roi(las,temp_shp)
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
}
badStem_list <- c("GJ192_39_88","BN19_125_1435","NF254_36_922","MT211_80_573","HK91_112_586","HY192_50_312")
shp_subset <- shp[shp$UNIQUE_ID %in% badStem_list]
shp_subset <- shp[shp$UNIQUE_ID %in% badStem_list,]
for(i in c(1:nrow(shp_subset))){
temp_shp <- shp[i,]
temp_las <- clip_roi(las,temp_shp)
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
}
for(i in c(1:nrow(shp_subset))){
temp_shp <- shp_subset[i,]
temp_las <- clip_roi(las,temp_shp)
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
}
file.create("BadStems")
readClipboard()
write_sf(shp_subset,"BadStems\\6_Nanwakolas_AGTfail_31122024InitialShapes.shp")
las_subset <- clip_roi(las,shp_subset)
writeLAS(las_subset,"BadStems\\6_Nanwakolas_AGTfail_31122024.las")
View(las_subset)
View(las_subset)
las_subset <- rbind(clip_roi(las,shp_subset))
?merge
las_subset <- readLAScatalog(clip_roi(las,shp_subset))
?clip_roi
for(i in c(1:nrow(shp_subset))){
temp_shp <- shp_subset[i,]
temp_las <- clip_roi(las,temp_shp)
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
writeLAS(temp_las,paste0("BadStems\\indLAS\\",temp_shp$UNIQUE_ID,".las"))
}
for(i in c(1:nrow(shp_subset))){
temp_shp <- shp_subset[i,]
temp_las <- clip_roi(las,temp_shp)
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
writeLAS(temp_las,paste0("BadStems\\indLAS\\",temp_shp$UNIQUE_ID,".las"))
}
for(i in c(1:nrow(shp_subset))){
temp_shp <- shp_subset[i,]
temp_las <- clip_roi(las,temp_shp)
if(sum(temp_las$Classification==2)==0){
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
}
#print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#writeLAS(temp_las,paste0("BadStems\\indLAS\\",temp_shp$UNIQUE_ID,".las"))
}
if(sum(temp_las$Classification==2)<1){
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
}
for(i in c(1:nrow(shp_subset))){
temp_shp <- shp_subset[i,]
temp_las <- clip_roi(las,temp_shp)
if(sum(temp_las$Classification==2)<1){
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
}
#print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#writeLAS(temp_las,paste0("BadStems\\indLAS\\",temp_shp$UNIQUE_ID,".las"))
}
for(i in c(1:nrow(shp_subset))){
temp_shp <- shp_subset[i,]
temp_las <- clip_roi(las,temp_shp)
if(sum(temp_las$Classification==2)<3){
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
}
#print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#writeLAS(temp_las,paste0("BadStems\\indLAS\\",temp_shp$UNIQUE_ID,".las"))
}
print(sum(temp_las$Classification))
print(sum(temp_las$Classification==2))
for(i in c(1:nrow(shp_subset))){
temp_shp <- shp_subset[i,]
temp_las <- clip_roi(las,temp_shp)
if(sum(temp_las$Classification==2)<5){
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
}
#print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#writeLAS(temp_las,paste0("BadStems\\indLAS\\",temp_shp$UNIQUE_ID,".las"))
}
for(i in c(1:nrow(shp_subset))){
temp_shp <- shp_subset[i,]
temp_las <- clip_roi(las,temp_shp)
if(sum(temp_las$Classification==2)<10){
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
}
#print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#writeLAS(temp_las,paste0("BadStems\\indLAS\\",temp_shp$UNIQUE_ID,".las"))
}
st_bbox(shp)
badStem_list <- c("GJ192_129_528","BN19_125_537","NF254_38_835","NB116_73_1772","HS168_6_299","HY192_64_412")
shp_subset <- shp[shp$UNIQUE_ID %in% badStem_list,]
las_subset <- readLAScatalog(clip_roi(las,shp_subset))
las_subset <- clip_roi(las,shp_subset)
write_sf(shp_subset,"BadStems\\6_Nanwakolas_AGTfail_31122024InitialShapes.shp")
writeLAS(las_subset,"BadStems\\6_Nanwakolas_AGTfail_31122024.las")
l <- bind_rows(las_subset)
for(i in las_subset){
plot(i)
}
c <- 1
for(i in las_subset){
writeLAS(i,paste0("BadStems\\indLAS\\",badStem_list[c],".las"))
c <- c+1
}
shp <- read_sf(files[9])
shp_subset <- shp[shp$UNIQUE_ID %in% badStem_list,]
write_sf(shp_subset,"BadStems\\6_Nanwakolas_AGTfail_31122024InitialShapes.shp")
writeLAS(las_subset,"BadStems\\6_Nanwakolas_AGTfail_31122024.las",layer_options="SHPT=POLYGONZ")
write_sf(shp_subset,"BadStems\\6_Nanwakolas_AGTfail_31122024InitialShapes.shp",layer_options="SHPT=POLYGONZ")
print(i$Intensity)
for(i in las_subset){
#writeLAS(i,paste0("BadStems\\indLAS\\",badStem_list[c],".las"))
print(i$Classification)
c <- c+1
}
#writeLAS(i,paste0("BadStems\\indLAS\\",badStem_list[c],".las"))
print(sum*i$Classification==2)
#writeLAS(i,paste0("BadStems\\indLAS\\",badStem_list[c],".las"))
print(sum(i$Classification==2))
for(i in las_subset){
#writeLAS(i,paste0("BadStems\\indLAS\\",badStem_list[c],".las"))
print(sum(i$Classification==2))
c <- c+1
}
for(i in c(1:nrow(shp_subset))){
temp_shp <- shp_subset[i,]
temp_las <- clip_roi(las,temp_shp)
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#writeLAS(temp_las,paste0("BadStems\\indLAS\\",temp_shp$UNIQUE_ID,".las"))
}
shp_subset <- shp[c(1:5),]
for(i in c(1:nrow(shp_subset))){
temp_shp <- shp_subset[i,]
temp_las <- clip_roi(las,temp_shp)
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#writeLAS(temp_las,paste0("BadStems\\indLAS\\",temp_shp$UNIQUE_ID,".las"))
}
shp_subset <- shp
for(i in c(1:nrow(shp_subset))){
temp_shp <- shp_subset[i,]
temp_las <- clip_roi(las,temp_shp)
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#writeLAS(temp_las,paste0("BadStems\\indLAS\\",temp_shp$UNIQUE_ID,".las"))
}
las <- readLAS(files[3])
for(i in c(1:nrow(shp_subset))){
temp_shp <- shp_subset[i,]
temp_las <- clip_roi(las,temp_shp)
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#writeLAS(temp_las,paste0("BadStems\\indLAS\\",temp_shp$UNIQUE_ID,".las"))
}
las <- st_transform(las,st_crs(shp))
for(i in c(1:nrow(shp_subset))){
temp_shp <- shp_subset[i,]
temp_las <- clip_roi(las,temp_shp)
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#writeLAS(temp_las,paste0("BadStems\\indLAS\\",temp_shp$UNIQUE_ID,".las"))
}
unique(las$Classification)
sum(las$Classification==2)
for(i in c(1:nrow(shp_subset))){
temp_shp <- shp_subset[i,]
temp_las <- clip_roi(las,temp_shp)
print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#print(paste0("There are ",sum(temp_las$Classification == 2)," non-ground stems for stem ",temp_shp$UNIQUE_ID))
#writeLAS(temp_las,paste0("BadStems\\indLAS\\",temp_shp$UNIQUE_ID,".las"))
}
readClipboard()
library(sf)
vaShp <- read_sf("C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\WFP\\Nanwakolas\\Validation\\DescriptorsMasks\\Production\\MERGE_VA_database_csrsAlb.shp")
readClipboard()
prodPoly <- read_sf("C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\WFP\\Nanwakolas\\Nanwakolas_ProductionPolys.shp")
st_crs(vaShp) <- st_crs(prodPoly)
joinedData <- st_join(vaShp,prodPoly,join=st_intersects)
prodGridID <- unique(joinedData$PRODGRIDID)
setwd(readClipboard())
batchLs <- list()
for(i in c(1:length(a))){
s <- a[i]
preL <- "aws s3 cp s3://western.forest.nanwakolas/Production/bils/"
epiL <- "_bil.zip C://Forsite//Nanwakolas//"
batchLs <- rbind(batchLs,paste0(preL,s,epiL))
preL <- "aws s3 cp s3://western.forest.nanwakolas/Production/stage1/"
epiL <- "InitialShapes_s1.zip C://Forsite//Nanwakolas//"
batchLs <- rbind(batchLs,paste0(preL,s,epiL))
}
for(i in c(1:length(prodGridID))){
s <- prodGridID[i]
preL <- "aws s3 cp s3://western.forest.nanwakolas/Production/bils/"
epiL <- "_bil.zip C://Forsite//Nanwakolas//"
batchLs <- rbind(batchLs,paste0(preL,s,epiL))
preL <- "aws s3 cp s3://western.forest.nanwakolas/Production/stage1/"
epiL <- "InitialShapes_s1.zip C://Forsite//Nanwakolas//"
batchLs <- rbind(batchLs,paste0(preL,s,epiL))
}
write.csv(batchLs,"BatchForAWS.csv",row.names=F)
setwd(readClipboard())
files <- list.files(pattern="*.shp")
for(i in files){
temp_shp <- read_sf(i)
min(temp_shp$HEIGHT)
}
temp_shp <- read_sf(i)
temp_shp$HEIGHT
min(temp_shp$HEIGHT)
for(i in files){
temp_shp <- read_sf(i)
if(min(temp_shp$HEIGHT)<5){
print(i)
}
}
for(i in files){
temp_shp <- read_sf(i)
print(min(temp_shp$HEIGHT))
if(min(temp_shp$HEIGHT)<5){
print(i)
}
}
library(foreign) ; library(sf)
polyList <- read.csv("C:\\Users\\MichaelBurnett\\Downloads\\highint4_1000pts_over_500int.txt",sep=",")
vaDBF <- read.dbf(readClipboard())
va_int <- vaDBF[vaDBF$STANDID %in% polyList$las,]
View(polyList)
View(vaDBF)
vaDBF <- read.dbf(readClipboard())
va_int <- vaDBF[vaDBF$STANDID %in% polyList$las,]
View(va_int)
vaID <- unique(va_int$VA_ID2)
vaID <- list(unique(va_int$VA_ID2))
unique(va_int$VA_ID2)
class(va_int$VA_ID2)
va_int$VA_ID2 <- as.character(va_int$VA_ID2)
vaDBF$VA_ID2 <- as.character(vaDBF$VA_ID2)
vas <- as.data.frame(unique(vaDBF$VA_ID2))
View(vas)
vas <- sort(vas)
vas <- sort(vas$`unique(vaDBF$VA_ID2)`)
vas$Int <- 0
vas <- as.data.frame(unique(vaDBF$VA_ID2))
vas <- data.frame(unique(vaDBF$VA_ID2))
vas <- sort(vas$`unique(vaDBF$VA_ID2)`)
vas <- data.frame(unique(vaDBF$VA_ID2))
vas <- sort(vas$unique.vaDBF.VA_ID2.)
vas <- data.frame(vas)
vas$Int <- 0
vaID <- unique(va_int$VA_ID2)
vas$Int[vas$vas %in% vaID] <- 1
getwd()
write.csv(vas,"C:\Users\MichaelBurnett\LiDAR Inventory group Dropbox\Project Data\OR\WFP\Nanwakolas\Validation\00_AllSpecies\20250106_Output\vaInt.csv")
readClipboard()
write.csv(vas,"C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\WFP\\Nanwakolas\\Validation\\Results\\Michael\\M1-989_Top345\\vaInt.csv")
vaID
sort(vaID)
parentDir <- readClipboard()
library(forsite)
viewAllLAZ(list.files(path=parentDir))
for(i in list.files(path=parentDir)){viewAllLAZ(i)}
for(i in list.files(path=parentDir)){print(i)}
setwd(parentDir)
for(i in list.files()){print(i)}
for(i in list.files()){viewAllLAZ(i)}
library(lidR)
for(i in list.files()){
temp_LAS <- readLAS(i)
plot(temp_LAS,size=4)
}
for(i in list.files()){
temp_LAS <- readLAS(i)
plot(temp_LAS,size=4)
}
for(i in list.files()){
temp_LAS <- readLAS(i)
plot(temp_LAS,size=4)
}
