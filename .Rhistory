library(usethis)
Authors@R:
c(person(given='Michael',family='Burnett',))
dir('myutils')
dir('forsite',all.files = T)
getwd()
create()
version()
library(usethis)
use_version()
Authors@R
use_r('my_functions')
use_mit_license('forsite')
person(given="Michael",family="Burnett")
load_all()
devtools::load_all()
devtools::check()
devtools::document()
library(devtools)
library(roxygen2)
use_package('lidR')
use_package('sf')
check()
check()
load_all()
check()
?menu
?as.integer
load_all()
check()
load_all()
check()
?document
document()
document()
?readClipboard
?lidR::locate_trees
folds <- list.files()
load_all()
check()
load_all()
library(usethis)
library(devtools)
use_version()
use_version()
use_r('pinningPlots')
?use_r
load_all()
check()
document()
load_all()
document()
document()
load_all()
document()
#' @param windowSize numeric or function: Length or diameter of the moving window used to detect the local maxima in the units of the input data (usually meters). If it is numeric a fixed window size is used. If it is a function, the function determines the size of the window at any given location on the canopy. By default function takes the height of a given pixel or point as its only argument and return the desired size of the search window when centered on that pixel/point. This can be controled with the 'ws_args' parameter
#' @param minHeight numeric: Minimum height of a tree. Threshold below which a pixel or a point cannot be a local maxima. Default is 2.
#'
#' @return A roughly pinned plot in a treeTops.shp file. Must of the understory will be excluded.
#'
#' @export pinningPlots
#' @examples
#' # Use the following template
#' # parentDir <- readClipboard() # after copying the file directory to your clipboard
#' # pinningPlots(parentDir,1,'Michael')
pinningPlots <- function(parentDirectory, folderCount, user, overstory="CN", understory="CU", windowSize=2, minHeight=5){
setwd(parentDirectory)
folds <- list.files()
if(isFALSE(grepl(user,folds[1]))){
file.rename(folds[1],paste0(folds[1],"_",user))
}
folds <- list.files()
print(folds[folderCount])
# Run these commands if there's no boundary file
## boundaryCommand <- paste0("lasboundary -i ",gsub(paste0("_",user),"",folds[folderCount]),".las",
##                           " -o ",r"{boundary.shp}")
## shell(paste0("cd ",folds[folderCount]," && ",boundaryCommand))
unbufferedLAS <- lidR::readLAS(paste0(parentDirectory,"\\",folds[folderCount],"\\",gsub(paste0("_",user),"",folds[folderCount]),".las"))
boundarySF <- lidR::st_concave_hull(unbufferedLAS)
las <- lidR::readLAS(paste0(parentDirectory,"\\",folds[folderCount],"\\Buffered\\",gsub(paste0("_",user),"",folds[folderCount]),".las"))
ttops <- lidR::locate_trees(las,lidR::lmf(ws=windowSize,hmin = minHeight))
x <- lidR::plot(las,bg="white",size=4)
lidR::add_treetops3d(x,ttops)
inputAccess <- utils::menu(c("Yes","No"),"Would you like to proceed? (Type a number)")
if(inputAccess!=1){stop()}
#localSHP <- read_sf(paste0(parentDir,"\\",folds[count],"\\",gsub("_Michael","",folds[count]),".shp"))
#localSHP <- sf::read_sf(paste0(parentDirectory,"\\",folds[folderCount],"\\boundary.shp"))
localSHP <- sf::st_zm(boundarySF)
sf::st_transform(ttops,sf::st_crs(localSHP))
sf::st_crs(ttops) <- sf::st_crs(localSHP)
ttops1 <- sf::st_intersection(ttops,localSHP)
ttops <- ttops[ttops$treeID %in% ttops1$treeID,]
names(ttops)[1] <- 'NAME'
ttops$NAME <- as.character(ttops$NAME)
# Populate naming section
lasRange <- range(las$Z)
lasThresh <- (lasRange[2]*0.75)+(lasRange[1]*(1-0.75)) # Cut off to seperate L0 and L1
for(i in c(1:nrow(ttops))){
if(isTRUE(ttops$Z[i]>lasThresh)){
ttops$NAME[i] <- paste0(overstory,"_1.00")
}
else{
ttops$NAME[i] <- paste0(understory,"_1.00")
}
}
# Remove any stem < 5m
minLas <- min(las$Z)
ttops <- ttops[which(ttops$Z >= minLas+minHeight),]
ttops$COLOR <- 255
ttops$COLOR <- as.integer(ttops$COLOR)
ttops$COMMENT <- ""
sf::write_sf(ttops,paste0(parentDirectory,"\\",folds[folderCount],"\\treeTops.shp"),layer_options="SHPT=POINTZ")
}
parentDir <- readClipboard()
pinningPlots(parentDir,2,'Michael')
load_all()
setwd(readClipboard())
load_all()
rm('pinningPlots')
load_all()
check()
library(devtools)
load_all()
check()
load_all()
check()
use_version()
load_all()
check()
load_all()
use_version()
load_all()
check()
load_all()
check()
use_r('gtQC')
load_all()
check()
load_all()
load_all()
check()
load_all()
document()
load_all()
document()
check()
load_all()
check()
load_all()
load_all()
check()
load_all()
document()
check()
load_all()
document()
check()
use_version()
load_all()
check()
