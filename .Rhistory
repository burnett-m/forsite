side_lengths[SL] <- st_distance(st_point(mrr_coords[SL,1:2]),st_point(mrr_coords[SL+1,1:2]))
}
major_axis_length <- max(side_lengths)
minor_axis_length <- min(side_lengths)
canopyVol <- (2/3) * pi * stem_height * ((major_axis_length / 2)*(minor_axis_length / 2))
initialShapes$CANOPYVOL[initialShapes$UNIQUE_ID==gsub(".laz","",i)] <- canopyVol
writeLAS(laz_above_threshold,paste0(outputDir,"\\",i))
}
temp_laz <- readLAS(i)
stem_elevation <- initialShapes$ELEVATION[initialShapes$UNIQUE_ID == gsub(".laz","",i)]
stem_height <- initialShapes$HEIGHT[initialShapes$UNIQUE_ID == gsub(".laz","",i)] - threshold # Calculated Peak_XY height minus the powerline height
laz_above_threshold <- temp_laz[temp_laz@data$Z > stem_elevation + threshold]
if(length(laz_above_threshold@data$X) < 4){next}
chull_poly <- st_concave_hull(laz_above_threshold)
mrr <- st_minimum_rotated_rectangle(chull_poly)
mrr_coords <- st_coordinates(mrr)
side_lengths <- numeric(4)
for(SL in c(1:4)){
side_lengths[SL] <- st_distance(st_point(mrr_coords[SL,1:2]),st_point(mrr_coords[SL+1,1:2]))
}
major_axis_length <- max(side_lengths)
minor_axis_length <- min(side_lengths)
canopyVol <- (2/3) * pi * stem_height * ((major_axis_length / 2)*(minor_axis_length / 2))
initialShapes$CANOPYVOL[initialShapes$UNIQUE_ID==gsub(".laz","",i)] <- canopyVol
writeLAS(laz_above_threshold,paste0(outputDir,"\\",i))
outputDir <- paste0(getwd(),"\\TenMetresRemoved")
writeLAS(laz_above_threshold,paste0(outputDir,"\\",i))
calculateCanopyVolume <- function(lazFiles, shapefile, threshold, outputDir){
initialShapes <- read_sf(shapefile)
for(i in lazFiles){
temp_laz <- readLAS(i)
stem_elevation <- initialShapes$ELEVATION[initialShapes$UNIQUE_ID == gsub(".laz","",i)]
stem_height <- initialShapes$HEIGHT[initialShapes$UNIQUE_ID == gsub(".laz","",i)] - threshold # Calculated Peak_XY height minus the powerline height
laz_above_threshold <- temp_laz[temp_laz@data$Z > stem_elevation + threshold]
if(length(laz_above_threshold@data$X) < 4){next}
chull_poly <- st_concave_hull(laz_above_threshold)
mrr <- st_minimum_rotated_rectangle(chull_poly)
mrr_coords <- st_coordinates(mrr)
side_lengths <- numeric(4)
for(SL in c(1:4)){
side_lengths[SL] <- st_distance(st_point(mrr_coords[SL,1:2]),st_point(mrr_coords[SL+1,1:2]))
}
major_axis_length <- max(side_lengths)
minor_axis_length <- min(side_lengths)
canopyVol <- (2/3) * pi * stem_height * ((major_axis_length / 2)*(minor_axis_length / 2))
initialShapes$CANOPYVOL[initialShapes$UNIQUE_ID==gsub(".laz","",i)] <- canopyVol
writeLAS(laz_above_threshold,paste0(outputDir,"\\",i))
}
write_sf(initialShapes,paste0(outputDir,"\\initialShapes_withCanopyVolume.shp"),layer_options="SHPT=POLYGONZ")
}
calculateCanopyVolume(lazFiles = lazFiles, shapefile,10,outputDir)
calculateCanopyVolume <- function(lazFiles, shapefile, threshold, outputDir){
initialShapes <- sf::read_sf(shapefile)
for(i in lazFiles){
temp_laz <- lidR::readLAS(i)
stem_elevation <- initialShapes$ELEVATION[initialShapes$UNIQUE_ID == gsub(".laz","",i)]
stem_height <- initialShapes$HEIGHT[initialShapes$UNIQUE_ID == gsub(".laz","",i)] - threshold # Calculated Peak_XY height minus the powerline height
laz_above_threshold <- temp_laz[temp_laz@data$Z > stem_elevation + threshold]
if(length(laz_above_threshold@data$X) < 4){next}
chull_poly <- lidR::st_concave_hull(laz_above_threshold)
mrr <- sf::st_minimum_rotated_rectangle(chull_poly)
mrr_coords <- sf::st_coordinates(mrr)
side_lengths <- numeric(4)
for(SL in c(1:4)){
side_lengths[SL] <- sf::st_distance(sf::st_point(mrr_coords[SL,1:2]),sf::st_point(mrr_coords[SL+1,1:2]))
}
major_axis_length <- max(side_lengths)
minor_axis_length <- min(side_lengths)
canopyVol <- (2/3) * pi * stem_height * ((major_axis_length / 2)*(minor_axis_length / 2))
initialShapes$CANOPYVOL[initialShapes$UNIQUE_ID==gsub(".laz","",i)] <- canopyVol
lidR::writeLAS(laz_above_threshold,paste0(outputDir,"\\",i))
}
sf::write_sf(initialShapes,paste0(outputDir,"\\initialShapes_withCanopyVolume.shp"),layer_options="SHPT=POLYGONZ")
}
calculateCanopyVolume(lazFiles = lazFiles, shapefile,10,outputDir)
sf::write_sf(initialShapes,paste0(outputDir,"\\initialShapes_withCanopyVolume.shp"),layer_options="SHPT=POLYGONZ")
View(initialShapes)
temp_laz <- lidR::readLAS(i)
stem_elevation <- initialShapes$ELEVATION[initialShapes$UNIQUE_ID == gsub(".laz","",i)]
stem_height <- initialShapes$HEIGHT[initialShapes$UNIQUE_ID == gsub(".laz","",i)] - threshold # Calculated Peak_XY height minus the powerline height
laz_above_threshold <- temp_laz[temp_laz@data$Z > stem_elevation + threshold]
if(length(laz_above_threshold@data$X) < 4){next}
chull_poly <- lidR::st_concave_hull(laz_above_threshold)
mrr <- sf::st_minimum_rotated_rectangle(chull_poly)
mrr_coords <- sf::st_coordinates(mrr)
side_lengths <- numeric(4)
for(SL in c(1:4)){
side_lengths[SL] <- sf::st_distance(sf::st_point(mrr_coords[SL,1:2]),sf::st_point(mrr_coords[SL+1,1:2]))
}
major_axis_length <- max(side_lengths)
minor_axis_length <- min(side_lengths)
canopyVol <- (2/3) * pi * stem_height * ((major_axis_length / 2)*(minor_axis_length / 2))
initialShapes$CANOPYVOL[initialShapes$UNIQUE_ID==gsub(".laz","",i)] <- canopyVol
lidR::writeLAS(laz_above_threshold,paste0(outputDir,"\\",i))
#'
#' @param lazFiles filenames(list of strings):
#' @param shapefile
#' @param threshold
#' @param outputDir
#'
#' @returns
#' @export
#'
#' @examples
calculateCanopyVolume <- function(lazFiles, shapefile, threshold, outputDir){
initialShapes <- sf::read_sf(shapefile)
initialShapes$CANOPYVOL <- 0
for(i in lazFiles){
temp_laz <- lidR::readLAS(i)
stem_elevation <- initialShapes$ELEVATION[initialShapes$UNIQUE_ID == gsub(".laz","",i)]
stem_height <- initialShapes$HEIGHT[initialShapes$UNIQUE_ID == gsub(".laz","",i)] - threshold # Calculated Peak_XY height minus the powerline height
laz_above_threshold <- temp_laz[temp_laz@data$Z > stem_elevation + threshold]
if(length(laz_above_threshold@data$X) < 4){next}
chull_poly <- lidR::st_concave_hull(laz_above_threshold)
mrr <- sf::st_minimum_rotated_rectangle(chull_poly)
mrr_coords <- sf::st_coordinates(mrr)
side_lengths <- numeric(4)
for(SL in c(1:4)){
side_lengths[SL] <- sf::st_distance(sf::st_point(mrr_coords[SL,1:2]),sf::st_point(mrr_coords[SL+1,1:2]))
}
major_axis_length <- max(side_lengths)
minor_axis_length <- min(side_lengths)
canopyVol <- (2/3) * pi * stem_height * ((major_axis_length / 2)*(minor_axis_length / 2))
initialShapes$CANOPYVOL[initialShapes$UNIQUE_ID==gsub(".laz","",i)] <- canopyVol
lidR::writeLAS(laz_above_threshold,paste0(outputDir,"\\",i))
}
sf::write_sf(initialShapes,paste0(outputDir,"\\initialShapes_withCanopyVolume.shp"),layer_options="SHPT=POLYGONZ")
}
calculateCanopyVolume(lazFiles = lazFiles, shapefile,10,outputDir)
setwd(readClipboard())
roxygen2::roxygenize()
remotes::install_github('burnett-m/forsite')
library(forsite)
remove.packages("forsite")
remotes::install_github('burnett-m/forsite')
remotes::install_github('burnett-m/forsite',dependencies = TRUE)
library(forsite)
lazFiles <- list.files(pattern="*.laz")
getwd(readClipboard())
setwd(readClipboard())
lazFiles <- list.files(pattern="*.laz")
readClipboard()
shapefile <- "C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Fugro Land USA\\Hydro Quebec\\intrusionCodes\\IntrusionCodes_17Dec24_14.46\\IntrusionCodes_17Dec24_14.46_withNDVI.shp"
outputDir <- readClipboard()
calculateCanopyVolume(lazFiles,shapefile,10,outputDir)
calculateCanopyVolume(lazFiles,shapefile,10,outputDir)
shp <- read_sf(shapefile)
hist(shp$HEIGHT)
shapefile
shp <- read_sf(gsub(".shp","_withCanopyVolume.shp",shapefile))
hist(shp$HEIGHT)
hist(shp$CANOPYVOL)
hist(shp$CANOPYVOL,breaks=40)
View(shp)
hist(shp$HEIGHT,main="Histogram of tree heights",xlab="Height (m)",breaks=30)
readClipboard()
tif <- terra:rast("C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Fugro Land USA\\Hydro Quebec\\Health_analysis\\HydroQC_NDVI.tif")
tif <- terra::rast("C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Fugro Land USA\\Hydro Quebec\\Health_analysis\\HydroQC_NDVI.tif")
library(terra)
res(tif)
?res
library(sf)
pDir <- readClipboard()
setwd(pDir)
shpFiles <- list.files(pattern="*.shp$")
shpFiles
intrusionCodes <- read_sf(shpFiles[1])
colnames(intrusionCodes)
a1_fallCodes <- intrusionCodes[intrusionCodes$FallCode == "A1",]
a1_fallCodes$FallD2Line <- as.numeric(a1_fallCodes$FallD2Line)
a1_fallCodes$DistToCent <- as.numeric(a1_fallCodes$DistToCent)
a1_fallCodes$NDVI <- as.numeric(a1_fallCodes$NDVI)
View(a1_fallCodes)
# Order based on canopy volume
a1_fallCodes <- a1_fallCodes[order(a1_fallCodes$CANOPYVOL,decreasing = TRUE),]
heaD(a1_fallCodes)
head(a1_fallCodes)
View(a1_fallCodes)
a1_fallCodes_200 <- a1_fallCodes[c(1:200),]
View(a1_fallCodes_200)
a1_fallCodes$CANOPYVOL <- as.numeric(a1_fallCodes$CANOPYVOL)
a1_fallCodes_200 <- a1_fallCodes[c(1:200),]
range(a1_fallCodes_200)
range(a1_fallCodes_200$CANOPYVOL)
hist(a1_fallCodes_200$DistToCent, breaks=20, xlab = "DistToCent", main="Histogram of DistToCent")
hist(a1_fallCodes_200$DistToCent, breaks=40, xlab = "DistToCent", main="Histogram of DistToCent")
hist(a1_fallCodes_200$FallD2Line, breaks=40,xlab = "FallD2Line", main="Histogram of FallD2Line")
hist(a1_fallCodes_200$NDVI, breaks=40, xlab="NDVI",main="Top 100 lowest NDVI Histogram")
hist(a1_fallCodes_200$NDVI, breaks=40, xlab="NDVI",main="Histogram of NDVI")
View(a1_fallCodes)
hist(a1_fallCodes$NDVI, breaks=40, xlab="NDVI",main="Histogram of NDVI of all A1 stems")
# Order based on canopy volume
a1_fallCodes <- a1_fallCodes[order(a1_fallCodes$FallD2Line,decreasing = TRUE),]
a1_fallCodes_200 <- a1_fallCodes[c(1:200),]
hist(a1_fallCodes_200$DistToCent, breaks=40, xlab = "DistToCent", main="Histogram of DistToCent")
hist(a1_fallCodes_200$FallD2Line, breaks=40,xlab = "FallD2Line", main="Histogram of FallD2Line")
hist(a1_fallCodes_200$NDVI, breaks=40, xlab="NDVI",main="Histogram of NDVI")
hist(a1_fallCodes_200$CANOPYVOL,breaks=4,xlab="Canopy Volume", main="Histogram of Canopy Volume")
hist(a1_fallCodes_200$CANOPYVOL,breaks=40,xlab="Canopy Volume", main="Histogram of Canopy Volume")
library(sf)
pDir <- readClipboard()
setwd(pDir)
shp <- read_sf(list.files(pattern="*.shp"))
csv <- read.csv(list.files(pattern="*.csv"))
list.files(pattern="*.csv")
csv <- read.csv(list.files(pattern="*.csv"))
shp$VisualInspection <- csv$VisualInspec.C.30[csv$UNIQUE_ID.C.80 == shp$UNIQUE_ID]
View(shp)
write_sf(shp,"IntrusionCodes_17Dec24_14.46_withNDVI_withCanopyVolume_withVisualInspec.shp",layer_options="SHPT=POLYGONZ")
intrusionCodes <- shp
View(intrusionCodes)
a1_fallCodes <- intrusionCodes[intrusionCodes$FallCode == "A1",]
a1_fallCodes$FallD2Line <- as.numeric(a1_fallCodes$FallD2Line)
a1_fallCodes$DistToCent <- as.numeric(a1_fallCodes$DistToCent)
a1_fallCodes$NDVI <- as.numeric(a1_fallCodes$NDVI)
a1_fallCodes$CANOPYVOL <- as.numeric(a1_fallCodes$CANOPYVOL)
View(a1_fallCodes)
sum(a1_fallCodes$VisualInspection)
sum(a1_fallCodes$VisualInspection != NA)
sum(a1_fallCodes$VisualInspection == 'Dead')
library(ggplot2)
colnames(a1_fallCodes)
p <- ggplot(a1_fallCodes, aes(x=HEIGHT,fill=VisualInspection)) +
geom_histogram(alpha=0.7, position='identity')
p
p <- ggplot(a1_fallCodes, aes(x=HEIGHT,fill=VisualInspection)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_manual(labels=c("Live","Dead"))
p
p <- ggplot(a1_fallCodes, aes(x=HEIGHT,fill=VisualInspection)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead"))
p
p <- ggplot(a1_fallCodes, aes(x=HEIGHT,fill=VisualInspection)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
a1_fallCodes <- a1_fallCodes[order(a1_fallCodes$FallD2Line,decreasing = TRUE),]
View(a1_fallCodes)
a1_fallCodes <- a1_fallCodes[order(a1_fallCodes$FallD2Line,decreasing = FALSE),]
a1_fall50 <- a1_fallCodes[c(1:50),]
p <- ggplot(a1_fall50, aes(x=HEIGHT,fill=VisualInspection)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
a1_fall50 <- a1_fallCodes[c(1:100),]
p <- ggplot(a1_fall50, aes(x=HEIGHT,fill=VisualInspection)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
a1_fall50 <- a1_fallCodes[c(1:200),]
p <- ggplot(a1_fall50, aes(x=HEIGHT,fill=VisualInspection)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fall50, aes(x=HEIGHT,fill=FallD2Line)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
#scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
?scale_fill_gradient
p <- ggplot(a1_fall50, aes(x=HEIGHT,fill=FallD2Line)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_gradient() +
#scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fall50, aes(x=HEIGHT,fill=FallD2Line)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_gradient(low="blue",high="red") +
#scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fall50, aes(x=HEIGHT,fill=FallD2Line)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_gradientn(low="blue",high="red") +
#scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fall50, aes(x=HEIGHT,fill=FallD2Line)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = mean(a1_fall50$FallD2Line)) +
#scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
?rnorm
p <- ggplot(a1_fall50, aes(x=HEIGHT,fill=FallD2Line)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
#scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = mean(a1_fall50$FallD2Line)) +
#scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fall50, aes(x=HEIGHT,fill=VisualInspection)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
?cut
binned_data <- cut(a1_fall50$FallD2Line,
breaks = seq(from=min(a1_fall50$FallD2Line),to=max(a1_fall50$FallD2Line),10),
include.lowest = TRUE,right=TRUE,labels=NULL, ordered_result = FALSE)
?seq
binned_data <- cut(a1_fall50$FallD2Line,
breaks = seq(from=min(a1_fall50$FallD2Line),to=max(a1_fall50$FallD2Line),by=10),
include.lowest = TRUE,right=TRUE,labels=NULL, ordered_result = FALSE)
binned_data <- cut(a1_fall50$FallD2Line,
breaks = seq(from=min(a1_fall50$FallD2Line),to=max(a1_fall50$FallD2Line),by=1),
include.lowest = TRUE,right=TRUE,labels=NULL, ordered_result = FALSE)
binned_data
View(a1_fall50)
binned_data <- cut(a1_fall50$FallD2Line,
breaks = seq(from=min(a1_fall50$FallD2Line),to=max(a1_fall50$FallD2Line)+1,by=1),
include.lowest = TRUE,right=TRUE,labels=NULL, ordered_result = FALSE)
binned_data
a1_fall50$binned_data <- cut(a1_fall50$FallD2Line,
breaks = seq(from=min(a1_fall50$FallD2Line),to=max(a1_fall50$FallD2Line)+1,by=1),
include.lowest = TRUE,right=TRUE,labels=NULL, ordered_result = FALSE)
p <- ggplot(a1_fall50, aes(x=HEIGHT,fill=binned_data)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = mean(a1_fall50$binned_data)) +
#scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
binned_data <- cut(a1_fall50$FallD2Line,
breaks = seq(from=min(a1_fall50$FallD2Line),to=max(a1_fall50$FallD2Line)+1,by=1),
include.lowest = TRUE,right=TRUE,labels=NULL, ordered_result = FALSE)[1]
binned_data
binned_data <- cut(a1_fall50$FallD2Line,
breaks = seq(from=min(a1_fall50$FallD2Line),to=max(a1_fall50$FallD2Line)+1,by=1),
include.lowest = TRUE,right=TRUE,labels=NULL, ordered_result = FALSE)[[1]]
binned_data <- cut(a1_fall50$FallD2Line,
breaks = seq(from=min(a1_fall50$FallD2Line),to=max(a1_fall50$FallD2Line)+1,by=1),
include.lowest = FALSE,right=TRUE,labels=NULL, ordered_result = FALSE)
binned_data
seq(from=min(a1_fall50$FallD2Line),to=max(a1_fall50$FallD2Line)+1,by=1)
p <- ggplot(a1_fall50, aes(x=HEIGHT,fill=VisualInspection)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
a1_fall50 <- a1_fallCodes[c(1:150),]
p <- ggplot(a1_fall50, aes(x=HEIGHT,fill=VisualInspection)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fallCodes, aes(x=HEIGHT,fill=VisualInspection)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fallCodes, aes(x=FallD2Line,fill=VisualInspection)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fallCodes, aes(x=FallD2Line,fill=VisualInspection)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="FallD2Line Distribution", x="FallD2Line (m)", y="Count", fill="") +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fallCodes, aes(x=NDVI,fill=VisualInspection)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="NDVI Distribution", x="NDVI", y="Count", fill="") +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
a1_fall50$binned_FallD2Line <- as.numeric(cut(a1_fall50$FallD2Line,
breaks = seq(from=min(a1_fall50$FallD2Line),to=max(a1_fall50$FallD2Line)+1,by=1),
include.lowest = TRUE,right=TRUE,labels=NULL))
p <- ggplot(a1_fall50, aes(x=HEIGHT,fill=binned_FallD2Line)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = mean(a1_fall50$binned_data)) +
#scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p <- ggplot(a1_fall50, aes(x=HEIGHT,fill=binned_FallD2Line)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = mean(a1_fall50$binned_FallD2Line)) +
#scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
class(a1_fall50$binned_FallD2Line)
# Summarize count of HEIGHT per bin
summary_df <- a1_fall50 %>%
group_by(binned_FallD2Line) %>%
summarise(count = n(),
avg_height = mean(HEIGHT, na.rm = TRUE)) %>%
ungroup()
# Summarize count of HEIGHT per bin
library(dplyr)
summary_df <- a1_fall50 %>%
group_by(binned_FallD2Line) %>%
summarise(count = n(),
avg_height = mean(HEIGHT, na.rm = TRUE)) %>%
ungroup()
# Plot
p <- ggplot(summary_df, aes(x = factor(binned_FallD2Line), y = count, fill = binned_FallD2Line)) +
geom_bar(stat = "identity", alpha = 0.7) +
labs(title = "Count by FallD2Line Bin", x = "FallD2Line Bin", y = "Count", fill = "Bin") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red",
midpoint = mean(summary_df$binned_FallD2Line)) +
theme_minimal()
p
View(summary_df)
# Plot
p <- ggplot(summary_df, aes(x = factor(avg_height), y = count, fill = binned_FallD2Line)) +
geom_bar(stat = "identity", alpha = 0.7) +
labs(title = "Count by FallD2Line Bin", x = "FallD2Line Bin", y = "Count", fill = "Bin") +
scale_fill_gradient2(low = "blue", mid = "white", high = "red",
midpoint = mean(summary_df$binned_FallD2Line)) +
theme_minimal()
p
p <- ggplot(a1_fall50, aes(x=HEIGHT,y=FallD2Line)) +
geom_point(size=2,shape=23) +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
#scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = mean(a1_fall50$binned_FallD2Line)) +
#scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fall50, aes(x=HEIGHT,y=FallD2Line)) +
geom_point(size=2,shape=23) +
labs(title="Height VS FallD2Line", x="Height (m)", y="Fall Distance To Line (m)", fill="") +
#scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = mean(a1_fall50$binned_FallD2Line)) +
#scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fall50, aes(x=HEIGHT,y=FallD2Line, fill=VisualInspection)) +
geom_point(size=2,shape=23) +
labs(title="Height VS FallD2Line", x="Height (m)", y="Fall Distance To Line (m)", fill="") +
#scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = mean(a1_fall50$binned_FallD2Line)) +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fall50, aes(x=NDVI,y=FallD2Line, fill=VisualInspection)) +
geom_point(size=2,shape=23) +
labs(title="NDVI VS FallD2Line", x="NDVI", y="Fall Distance To Line (m)", fill="") +
#scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = mean(a1_fall50$binned_FallD2Line)) +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fall50, aes(x=NDVI,y=FallD2Line, fill=VisualInspection)) +
geom_point(alpha=0.7,size=2,shape=23) +
labs(title="NDVI VS FallD2Line", x="NDVI", y="Fall Distance To Line (m)", fill="") +
#scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = mean(a1_fall50$binned_FallD2Line)) +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fall50, aes(x=CANOPYVOL,y=FallD2Line, fill=VisualInspection)) +
geom_point(alpha=0.7,size=2,shape=23) +
labs(title="Canopy Volume VS FallD2Line", x="Canopy Volume (m3)", y="Fall Distance To Line (m)", fill="") +
#scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = mean(a1_fall50$binned_FallD2Line)) +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
# Order based on canopy volume
a1_fallCodes <- a1_fallCodes[order(a1_fallCodes$FallD2Line,decreasing = TRUE),]
a1_fallCodes$CANOPYVOL <- as.numeric(a1_fallCodes$CANOPYVOL)
a1_fallCodes_200 <- a1_fallCodes[c(1:50),]
a1_fallCodes <- a1_fallCodes[order(a1_fallCodes$FallD2Line,decreasing = FALSE),]
a1_fall50 <- a1_fallCodes[c(1:50),]
p <- ggplot(a1_fall50, aes(x=HEIGHT,fill=VisualInspection)) +
geom_histogram(alpha=0.7, position='identity') +
labs(title="Height Distribution", x="Height (m)", y="Count", fill="") +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fall50, aes(x=HEIGHT,y=FallD2Line, fill=VisualInspection)) +
geom_point(size=2,shape=23) +
labs(title="Height VS FallD2Line", x="Height (m)", y="Fall Distance To Line (m)", fill="") +
#scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = mean(a1_fall50$binned_FallD2Line)) +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fall50, aes(x=NDVI,y=FallD2Line, fill=VisualInspection)) +
geom_point(alpha=0.7,size=2,shape=23) +
labs(title="NDVI VS FallD2Line", x="NDVI", y="Fall Distance To Line (m)", fill="") +
#scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = mean(a1_fall50$binned_FallD2Line)) +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
p <- ggplot(a1_fall50, aes(x=CANOPYVOL,y=FallD2Line, fill=VisualInspection)) +
geom_point(alpha=0.7,size=2,shape=23) +
labs(title="Canopy Volume VS FallD2Line", x="Canopy Volume (m3)", y="Fall Distance To Line (m)", fill="") +
#scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = mean(a1_fall50$binned_FallD2Line)) +
scale_fill_manual(values=c("green","red"),labels=c("Live","Dead")) +
theme_minimal()
p
