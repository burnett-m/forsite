?changeZgeometry_fromHeight
pDir <- readClipboard()
setwd(pDir)
shpFile <- listfiles(pattern="*.shp")
shpFile <- list.files(pattern="*.shp")
changeZgeometry_fromHeight(shpFile)
#' @param output filename : The output location for the "fixed" shapefile.
#'
#' @return shapefile
#' @export changeZgeometry_fromHeight
#'
#' @examples
#' shpDir <- readClipboard() # Read the directory path of the folder containing the shapefile you would like to fix
#' setwd(shpDir)
#' files <- list.files(pattern="*.shp")
#' changeZgeometry_fromHeight(files[1]) # Fixes the Z geometry of the first shapefile listed in that directory
changeZgeometry_fromHeight <- function(shapefile,output = gsub(".shp","_fixedZ.shp",shapefile)){
shp <- sf::read_sf(shapefile)
if("HEIGHT" %in% colnames(shp)){
height_additions <- shp$HEIGHT
for(i in c(1:length(height_additions))){
temp_subset <- shp[i,]
temp_coord <- sf::st_coordinates(temp_subset)
temp_coord[,3] <- temp_coord[,3] + height_additions[i]
#a polygon from coords
temp_poly <- sf::st_polygon(x = list(temp_coord[, 1:3])) %>%  # X,Y,Z
sf::st_sfc() %>%  # from sfg to sfc
sf::st_sf() # from sfc to sf
sf::st_geometry(temp_subset) <- sf::st_geometry(temp_poly) # write geometry back into original data
sf::st_crs(temp_subset) <- sf::st_crs(shp)
sf::st_geometry(shp[i,]) <- sf::st_geometry(temp_subset)
}
sf::write_sf(shp,output,layer_options="SHPT=POLYGONZ")
}
else{
errorCondition("Use a shapefile with a HEIGHT column")
}
}
changeZgeometry_fromHeight(shpFile)
detach("package:forsite", unload = TRUE)
changeZgeometry_fromHeight(shpFile)
#' @param output filename : The output location for the "fixed" shapefile.
#'
#' @return shapefile
#' @export changeZgeometry_fromHeight
#'
#' @examples
#' shpDir <- readClipboard() # Read the directory path of the folder containing the shapefile you would like to fix
#' setwd(shpDir)
#' files <- list.files(pattern="*.shp")
#' changeZgeometry_fromHeight(files[1]) # Fixes the Z geometry of the first shapefile listed in that directory
changeZgeometry_fromHeight <- function(shapefile,output = gsub(".shp","_fixedZ.shp",shapefile)){
shp <- sf::read_sf(shapefile)
if("HEIGHT" %in% colnames(shp)){
height_additions <- shp$HEIGHT
for(i in c(1:length(height_additions))){
temp_subset <- shp[i,]
temp_coord <- sf::st_coordinates(temp_subset)
temp_coord[,3] <- temp_coord[,3] + height_additions[i]
#a polygon from coords
temp_poly <- sf::st_polygon(x = list(temp_coord[, 1:3])) %>%  # X,Y,Z
sf::st_sfc() %>%  # from sfg to sfc
sf::st_sf() # from sfc to sf
sf::st_geometry(temp_subset) <- sf::st_geometry(temp_poly) # write geometry back into original data
sf::st_crs(temp_subset) <- sf::st_crs(shp)
sf::st_geometry(shp[i,]) <- sf::st_geometry(temp_subset)
}
sf::write_sf(shp,output,layer_options="SHPT=POLYGONZ")
}
else{
errorCondition("Use a shapefile with a HEIGHT column")
}
}
changeZgeometry_fromHeight(shpFile)
library(dplyr)
changeZgeometry_fromHeight(shpFile)
pDir <- readClipboard()
folds <- list.files()
folds
setwd(pDir)
folds <- list.files()
folds
folds <- folds[-5]
folds
for(i in folds){
setwd(i)
shpFile <- list.files(pattern = "*.shp")
changeZgeometry_fromHeight(shpFile)
setwd(pDir)
}
setwd(i)
setwd(pDir)
setwd(i)
shpFile <- list.files(pattern = "*.shp")
changeZgeometry_fromHeight(shpFile)
if(length(shpFile) == 0){
print(paste0("Folder: ",i," has no shapefile in it."))
}
for(i in folds){
setwd(i)
shpFile <- list.files(pattern = "*.shp")
if(length(shpFile) == 0){
print(paste0("Folder: ",i," has no shapefile in it."))
}
else{changeZgeometry_fromHeight(shpFile)}
setwd(pDir)
}
setwd(pDir)
for(i in folds){
setwd(i)
shpFile <- list.files(pattern = "*.shp")
if(length(shpFile) == 0){
print(paste0("Folder: ",i," has no shapefile in it."))
}
else{changeZgeometry_fromHeight(shpFile)}
setwd(pDir)
}
sDir <- readClipboard()
setwd(sDir)
files <- list.files()
library(lidR)
for(i in files){
tempLas <- readLAS(i)
plot(tempLas)
}
setwd(sDir)
files <- list.files()
for(i in files){
tempLas <- readLAS(i)
plot(tempLas)
}
sDir
i
tempLas <- readLAS(i)
plot(tempLas)
library(lidR)
sDir <- readClipboard()
setwd(sDir)
files <- list.files()
for(i in files){
tempLas <- readLAS(i)
plot(tempLas)
}
files <- list.files()
for(i in files){
tempLas <- readLAS(i)
plot(tempLas)
}
library(lidR)
sDir <- readClipboard()
setwd(sDir)
files <- list.files()
for(i in files){
tempLas <- readLAS(i)
plot(tempLas)
}
files <- list.files()
for(i in files){
tempLas <- readLAS(i)
plot(tempLas)
}
files <- list.files()
for(i in files){
tempLas <- readLAS(i)
plot(tempLas)
}
readClipboard()
# Compare histograms of two models
parentDir <- "C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\New Brunswick\\Validation\\Results\\Michael"
setwd(parentDir)
folds <- list.files()
####### Get histograms #####
h1 <- 'M35'
####### Get histograms #####
h1 <- 'J125'
h2 <- 'M35'
# Histogram 1
setwd(paste0(parentDir,"\\",folds[grepl(pattern = paste0(h1,"-.*"), x=folds)]))
Histo1 <- read.csv(list.files(pattern="*initial.csv"))
# Histogram 2
setwd(paste0(parentDir,"\\",folds[grepl(pattern = paste0(h2,"-.*"), x=folds)]))
Histo2 <- read.csv(list.files(pattern="*initial.csv"))
#### Comparisons ####
# Check what's in histo1 and not histo 2 and vice versa
H1_diff <- Histo1[which(!Histo1$X %in% Histo2$X),]
H2_diff <- Histo2[which(!Histo2$X %in% Histo1$X),]
write.csv(H1_diff,"M35-addList.csv",row.names=F)
library(foreign)
setwd(readClipboard())
DBFfiles <- list.files(pattern = "*.dbf")
dbf <- read.dbf(DBFfiles[1])
View(dbf)
dbf_subset <- dbf[c(42:73)]
sum(dbf_subset)
dbf_subset_cols <- colnames(dbf_subset)
dbf_subset["Ha"]
for(i in dbf_subset_cols){
print(sum(dbf_subset[i]))
}
for(i in dbf_subset_cols){
paste0(i," : ",sum(dbf_subset[i]))
}
paste0(i," : ",sum(dbf_subset[i]))
for(i in dbf_subset_cols){
paste0(i," : ",sum(dbf_subset[i]))
}
for(i in dbf_subset_cols){
print(paste0(i," : ",sum(dbf_subset[i])))
}
unique(dbf$LEADSPC)
colnames(dbf)
sort(colnames(dbf))
sort(colnames(dbf))
library(forsite)
pDir <- readClipboard()
pinningPlots(pDir,1,overstory = "DC",understory = "DU",minHeight = 3)
pinningPlots(pDir,2,overstory = "DC",understory = "DU",minHeight = 3)
pinningPlots(pDir,3,overstory = "DC",understory = "DU",minHeight = 3)
pinningPlots(pDir,4,overstory = "DC",understory = "DU",minHeight = 3)
pinningPlots(pDir,5,overstory = "DC",understory = "DU",minHeight = 3)
library(lidR)
setwd(readClipboard())
las <- readLAS(list.files()[1])
max(las@data$Intensity)
library(terra)
setwd(readClipboard())
tiffFiles <- list.files(pattern = "*.tif")
chm <- rast(tiffFiles[1])
hist(chm)
max(chm)
library(lidR)
pDir <- readClipboard()
setwd(pDir)
for(i in list.files()){
temp_las <- readLAS(i)
plot(temp_las)
while (rgl::rgl.cur() > 0) {
Sys.sleep(0.1)  # Keep the window open and check periodically if it's closed
}
}
for(i in list.files()){
temp_las <- readLAS(i)
print(i)
plot(temp_las)
while (rgl::rgl.cur() > 0) {
Sys.sleep(0.1)  # Keep the window open and check periodically if it's closed
}
}
for(i in list.files()){
temp_las <- readLAS(i)
print(i)
plot(temp_las)
while (rgl::rgl.cur() > 0) {
Sys.sleep(0.1)  # Keep the window open and check periodically if it's closed
}
}
close()
close(las)
?lidR::lmf
forsite::pinningPlots
library(forsite)
pDir <- readClipboard()
pinningPlots(pDir,1)
setwd(pDir)
setwd(pDir)
pinningPlots(pDir,1)
?pinningPlots
forsite::pinningPlots(pDir,1)
library(forsite)
pDir <- readClipboard()
pinningPlots(pDir,1)
pinningPlots(pDir,1,overstory = "DC",understory = "DU",minHeight = 3)
library(openxlsx)
pDir <- readClipboard()
setwd(pDir)
files <- list.files()
files
xlsx <- read.xlsx(files[10])
xlsx <- read.csv(files[10])
plot(xlsx$DBH_pred,xlsx$DBH_TSI)
plot(xlsx$DBH_pred,xlsx$DBH_TSI,xlab = "DBH Predicted From Script",ylab = "DBH Predicted From TSI")
# Add the 45-degree line (y = x)
abline(0, 1, col = "red", lty = 2, lwd = 2) #intercept 0, slope 1
hist(xlsx$difference)
hist(xlsx$difference,xlab="(DBH From Script) - (DBH From TSI)")
hist(xlsx$difference,breaks=100,xlab="(DBH From Script) - (DBH From TSI)")
hist(xlsx$difference,breaks=100,xlab="(DBH From Script) - (DBH From TSI)", main="")
mean(xlsx$difference)
y_avg <- mean(xlsx$DBH_TSI)
plot(xlsx$DBH_pred,xlsx$DBH_TSI,xlab = "DBH Predicted From Script",ylab = "DBH Predicted From TSI")
# Add the 45-degree line (y = x)
abline(0, 1, col = "red", lty = 2, lwd = 2) #intercept 0, slope 1
abline(h= y_avg, col = "blue", lty = 2, lwd = 2)
linear_model <- lm(xlsx$DBH_TSI ~ xlsx$DBH_pred)
plot(xlsx$DBH_pred,xlsx$DBH_TSI,xlab = "DBH Predicted From Script",ylab = "DBH Predicted From TSI")
# Add the 45-degree line (y = x)
abline(0, 1, col = "red", lty = 2, lwd = 2) #intercept 0, slope 1
abline(coef(linear_model)[2],coef(linear_model)[1], col = "blue", lty = 2, lwd = 2)
plot(xlsx$DBH_pred,xlsx$DBH_TSI,xlab = "DBH Predicted From Script",ylab = "DBH Predicted From TSI")
# Add the 45-degree line (y = x)
abline(0, 1, col = "red", lty = 2, lwd = 2) #intercept 0, slope 1
abline(coef(linear_model)[1], coef(linear_model)[2], col = "blue", lty = 2, lwd = 2)
pDir <- readClipboard()
library(forsite)
pinningPlots(pDir,1,minHeight = 1)
pinningPlots(pDir,2,minHeight = 1)
pinningPlots(pDir,3,minHeight = 1)
pinningPlots(pDir,3,minHeight = 1, overstory = "DC",understory = "DU")
pinningPlots(pDir,4,minHeight = 1, overstory = "DC",understory = "DU")
pinningPlots(pDir,4,minHeight = 1,understory = "DU")
pinningPlots(pDir,4,minHeight = 1)
pinningPlots(pDir,5,minHeight = 1)
pinningPlots(pDir,5,minHeight = 1, overstory = "DC",understory = "DU")
pinningPlots(pDir,5,minHeight = 1)
?pinningPlots
remotes::install_github("Jean-Romain/lidRplugins")
pinningPlots(pDir,2,minHeight = 1)
pinningPlots(pDir,2,minHeight = 1, overstory = "DC",understory = "DU")
pinningPlots(pDir,3,minHeight = 1, overstory = "DC",understory = "DU")
pinningPlots(pDir,3,minHeight = 1)
remotes::install_github("Jean-Romain/lidRplugins")
warnings()
install.packages('rgeos')
library(lidR)
setwd(readClipboard())
las <- readLAS(list.files(pattern="*.laz")[1])
las_check(las)
LASheader(las)
print(las)
library(sf)
setwd(readClipboard())
shp <- read_sf(list.files(pattern = "*.shp")[1])
View(shp)
class(shp$HEIGHT)
class(shp$HEIGHT[1377])
class(shp$HEIGHT[1378])
shp$HEIGHT[1378]
shp$HEIGHT[c(1370:1378)]
shp <- read_sf(list.files(pattern = "*.shp")[2])
View(shp)
shpFiles <- list.files(pattern = "*.shp")
shp <- read_sf(shpFiles[2])
View(shp)
shp[1377]
shp[1377,]
shp$geometry[1377,]
shp$geometry[1376,]
shp$geometry[1378,]
st_crs(shp)
duplicated(shp$NAME)
sum(duplicated(shp$NAME))
sum(duplicated(shp$BASE_OBJEC))
sum(duplicated(shp$HEIGHT))
library(forsite)
pDir <- readClipboard()
pinningPlots(pDir,1,minHeight = 1)
pinningPlots(pDir,1,minHeight = 1)
install.packages('xfun')
pinningPlots(pDir,1,minHeight = 1)
pinningPlots(pDir,1,minHeight = 1,overstory = "DC",understory = "DU")
?lidR::locate_trees
version(lidR)
?version
remotes::install_github("Jean-Romain/lidRplugins")
install.packages("rgdal")
library(sf)
pDir <- readClipboard()
shp <- read_sf(list.files(pattern="*.shp$"))
shp <- read_sf(list.files(pattern="*.shp$")[1])
shpFiles <- list.files(pattern="*.shp$")
setwd(pDir)
shpFiles <- list.files(pattern="*.shp$")
shp <- read_sf(shpFiles[1])
View(shp)
shp$Year <- format(as.Date(shp$INV_DATE),"%Y")
shp_2018 <- shp[shp$Year == 2018]
shp_2018 <- shp[shp$Year == 2018,]
View(shp_2018)
unique_years <- unique(shp$Year)
for(i in unique_years){
temp_subset <- shp[shp$Year == i,]
write_sf(temp_subset,paste0("iTree_subset_",as.character(i),".shp"))
}
pDir <- readClipboard()
setwd(pDir)
files <- list.files()
readClipboard()
txtFile <- "C:\\Users\\MichaelBurnett\\Downloads\\downloadlist.txt"
txt <- read.csv(txtFile)
View(txt)
txt <- read.csv(txtFile,sep="\t")
txt <- read.csv(txtFile)
txt <- read.csv(txtFile,header=F)
txt.head()
head(txt)
txt$File <- <- regexpr("/", input_string, fixed = TRUE)[-1]
txt$File <- regexpr("/", input_string, fixed = TRUE)[-1]
txt$File <- regexpr("/", txt$V1, fixed = TRUE)[-1]
regexpr("/", txt$V1, fixed = TRUE)[-1]
regexpr("/", txt$V1, fixed = TRUE)
extract_after_char <- function(input_string, character) {
"""
Extracts everything after the last occurrence of a specified character in a string.
Args:
input_string (str): The input string.
character (str): The character to search for.
Returns:
str: The substring after the last occurrence of the character, or the original string
if the character is not found.
"""
extract_after_char <- function(input_string, character) {
"""
Extracts everything after the last occurrence of a specified character in a string.
Args:
input_string (str): The input string.
character (str): The character to search for.
Returns:
str: The substring after the last occurrence of the character, or the original string
if the character is not found.
"""
extract_after_char <- function(input_string, character) {
last_char_position <- regexpr(character, input_string, fixed = TRUE)
if (last_char_position == -1) {
return(input_string) # Character not found, return the original string
} else {
return(substr(input_string, last_char_position + 1, nchar(input_string))) #extract everything after the character.
}
}
extract_after_char(txt$V1)
extract_after_char(txt$V1[1])
txt$V1 <- as.character(txt$V1)
extract_after_char(txt$V1[1])
class(txt$V1)
View(txt)
extract_after_char(txt$V1)
extract_after_char(txt$V1,"/")
extract_after_char(txt$V1[1],"/")
txtFile <- "C:\\Users\\MichaelBurnett\\Downloads\\downloadlist.csv"
txt <- read.csv(txtFile,header=F)
readClipboard()
txtFile <- "C:\\Users\\MichaelBurnett\\Downloads\\downloadlist.csv"
txt <- read.csv(txtFile,header=F)
txt$V13
`%notin%` <- Negate(`%in%`)
print(i)
for(i in files){
if(i %notin% txt$V13){
print(i)
}
}
for(i in txt$V13){
if(i %notin% files){
print(i)
}
}
newTXT <- list()
newTXT <- list()
for(i in txt$V13){
if(i %notin% files){
print(i)
newTXT <- rbind(newTXT,gsub("https://rockyweb.usgs.gov/vdelivery/Datasets/Staged/Elevation/LPC/Projects/NY_FEMAR2_Central_2018_D19/NY_FEMAR2_Central_3_2018/LAZ/",i))
}
}
for(i in txt$V13){
if(i %notin% files){
print(i)
newTXT <- rbind(newTXT,paste0("https://rockyweb.usgs.gov/vdelivery/Datasets/Staged/Elevation/LPC/Projects/NY_FEMAR2_Central_2018_D19/NY_FEMAR2_Central_3_2018/LAZ/",i))
}
}
View(newTXT)
write.csv(newTXT,"newDownloadList.txt")
write.csv(newTXT,"newDownloadList.txt",header=F,row.names=F)
write.csv(newTXT,"newDownloadList.txt",col.names = F,row.names=F)
files <- list.files()
txtFile <- "C:\\Users\\MichaelBurnett\\Downloads\\downloadlist.csv"
txt <- read.csv(txtFile,header=F)
txt$V13
newTXT <- list()
`%notin%` <- Negate(`%in%`)
for(i in txt$V13){
if(i %notin% files){
print(i)
newTXT <- rbind(newTXT,paste0("https://rockyweb.usgs.gov/vdelivery/Datasets/Staged/Elevation/LPC/Projects/NY_FEMAR2_Central_2018_D19/NY_FEMAR2_Central_3_2018/LAZ/",i))
}
}
write.csv(newTXT,"newDownloadList2.txt",col.names = F,row.names=F)
newTXT
newTXT[1]
files <- list.files()
txtFile <- "C:\\Users\\MichaelBurnett\\Downloads\\downloadlist.csv"
txt <- read.csv(txtFile,header=F)
txt$V13
newTXT <- list()
`%notin%` <- Negate(`%in%`)
for(i in txt$V13){
if(i %notin% files){
print(i)
newTXT <- rbind(newTXT,paste0("https://rockyweb.usgs.gov/vdelivery/Datasets/Staged/Elevation/LPC/Projects/NY_FEMAR2_Central_2018_D19/NY_FEMAR2_Central_3_2018/LAZ/",i))
}
}
write.csv(newTXT,"newDownloadList2.txt",col.names = F,row.names=F)
newTXT[1]
?lidR::locate_trees
?lidR::locate_trees
library(forsite)
pDir <- readClipboard()
pinningPlots(pDir,1,minHeight = 1)
setwd(pDir)
pinningPlots(pDir,1,minHeight = 1)
setwd(readClipboard())
files <- list.files()
file.rename(files,gsub("_buffered","",files))
