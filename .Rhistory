while (rgl::rgl.cur() > 0) {
Sys.sleep(0.1)  # Keep the window open and check periodically if it's closed
}
}
for(i in files){viewAllLAZ(i,plotView = F)}
#' @param plotView boolean: TRUE if you want a generalized view of the point cloud with file name, FALSE if you want a superior rendering without the filename
#'
#' @return The RGL window displays a LAS point cloud
#'
#' @export viewAllLAZ
#' @examples
#' parentDir <- readClipboard() # Read the directory path of a folder containing several LAZ/LAS files
#' setwd(parentDir)
#' files <- list.files(pattern="*.laz")
#' for(file in files){viewAllLAS(file)}
viewAllLAZ <- function(lazFile,plotView = TRUE){
temp_laz <- lidR::readLAS(lazFile)
if(lidR::is.empty(temp_laz)){ # In case there is no LAZ
cat(paste0("Skipping empty laz file: ",lazFile))
return()
}
if(isTRUE(plotView)){
# Access XYZ
x <- temp_laz@data$X
y <- temp_laz@data$Y
z <- temp_laz@data$Z
# Plot
rgl::open3d()
rgl::plot3d(x,y,z,col=terrain.colors(length(z))[as.numeric(cut(z, breaks=length(z)))],size=3,main=lazFile,axes=F,xlab="",ylab="",zlab="")#,type="s")
}
else{
plot(temp_laz,size=4)
rgl::bgplot3d({
par(bg='black')
plot.new()
abline(v = min(temp_laz$X),col='white')
title(main = lazFile,line=1,adj=0,col.main='blue',cex.main=0.9,axis=TRUE)
})
}
# Wait for the user to close the rgl window before continuing to the next file
cat("Close the rgl window to continue to the next file.\n")
while (rgl::rgl.cur() > 0) {
Sys.sleep(0.1)  # Keep the window open and check periodically if it's closed
}
}
for(i in files){viewAllLAZ(i,plotView = F)}
?title
#' @param plotView boolean: TRUE if you want a generalized view of the point cloud with file name, FALSE if you want a superior rendering without the filename
#'
#' @return The RGL window displays a LAS point cloud
#'
#' @export viewAllLAZ
#' @examples
#' parentDir <- readClipboard() # Read the directory path of a folder containing several LAZ/LAS files
#' setwd(parentDir)
#' files <- list.files(pattern="*.laz")
#' for(file in files){viewAllLAS(file)}
viewAllLAZ <- function(lazFile,plotView = TRUE){
temp_laz <- lidR::readLAS(lazFile)
if(lidR::is.empty(temp_laz)){ # In case there is no LAZ
cat(paste0("Skipping empty laz file: ",lazFile))
return()
}
if(isTRUE(plotView)){
# Access XYZ
x <- temp_laz@data$X
y <- temp_laz@data$Y
z <- temp_laz@data$Z
# Plot
rgl::open3d()
rgl::plot3d(x,y,z,col=terrain.colors(length(z))[as.numeric(cut(z, breaks=length(z)))],size=3,main=lazFile,axes=F,xlab="",ylab="",zlab="")#,type="s")
}
else{
plot(temp_laz,size=4)
rgl::bgplot3d({
par(bg='black')
plot.new()
abline(v = min(temp_laz$X),col='white')
title(main = lazFile,line=0.5,adj=0,col.main='white',cex.main=0.9,axis=TRUE)
})
}
# Wait for the user to close the rgl window before continuing to the next file
cat("Close the rgl window to continue to the next file.\n")
while (rgl::rgl.cur() > 0) {
Sys.sleep(0.1)  # Keep the window open and check periodically if it's closed
}
}
for(i in files){viewAllLAZ(i,plotView = F)}
#' @param plotView boolean: TRUE if you want a generalized view of the point cloud with file name, FALSE if you want a superior rendering without the filename
#'
#' @return The RGL window displays a LAS point cloud
#'
#' @export viewAllLAZ
#' @examples
#' parentDir <- readClipboard() # Read the directory path of a folder containing several LAZ/LAS files
#' setwd(parentDir)
#' files <- list.files(pattern="*.laz")
#' for(file in files){viewAllLAS(file)}
viewAllLAZ <- function(lazFile,plotView = TRUE){
temp_laz <- lidR::readLAS(lazFile)
if(lidR::is.empty(temp_laz)){ # In case there is no LAZ
cat(paste0("Skipping empty laz file: ",lazFile))
return()
}
if(isTRUE(plotView)){
# Access XYZ
x <- temp_laz@data$X
y <- temp_laz@data$Y
z <- temp_laz@data$Z
# Plot
rgl::open3d()
rgl::plot3d(x,y,z,col=terrain.colors(length(z))[as.numeric(cut(z, breaks=length(z)))],size=3,main=lazFile,axes=F,xlab="",ylab="",zlab="")#,type="s")
}
else{
plot(temp_laz,size=4)
rgl::bgplot3d({
par(bg='black')
plot.new()
abline(v = min(temp_laz$X),col='white')
title(main = lazFile,line=0.5,adj=1,col.main='white',cex.main=0.9,axis=TRUE)
})
}
# Wait for the user to close the rgl window before continuing to the next file
cat("Close the rgl window to continue to the next file.\n")
while (rgl::rgl.cur() > 0) {
Sys.sleep(0.1)  # Keep the window open and check periodically if it's closed
}
}
for(i in files){viewAllLAZ(i,plotView = F)}
#' @param plotView boolean: TRUE if you want a generalized view of the point cloud with file name, FALSE if you want a superior rendering without the filename
#'
#' @return The RGL window displays a LAS point cloud
#'
#' @export viewAllLAZ
#' @examples
#' parentDir <- readClipboard() # Read the directory path of a folder containing several LAZ/LAS files
#' setwd(parentDir)
#' files <- list.files(pattern="*.laz")
#' for(file in files){viewAllLAS(file)}
viewAllLAZ <- function(lazFile,plotView = TRUE){
temp_laz <- lidR::readLAS(lazFile)
if(lidR::is.empty(temp_laz)){ # In case there is no LAZ
cat(paste0("Skipping empty laz file: ",lazFile))
return()
}
if(isTRUE(plotView)){
# Access XYZ
x <- temp_laz@data$X
y <- temp_laz@data$Y
z <- temp_laz@data$Z
# Plot
rgl::open3d()
rgl::plot3d(x,y,z,col=terrain.colors(length(z))[as.numeric(cut(z, breaks=length(z)))],size=3,main=lazFile,axes=F,xlab="",ylab="",zlab="")#,type="s")
}
else{
plot(temp_laz,size=4)
rgl::bgplot3d({
par(bg='black')
plot.new()
abline(v = min(temp_laz$X),col='white')
title(main = lazFile,line=0.5,adj=1,col.main='white',cex.main=0.5,axis=TRUE)
})
}
# Wait for the user to close the rgl window before continuing to the next file
cat("Close the rgl window to continue to the next file.\n")
while (rgl::rgl.cur() > 0) {
Sys.sleep(0.1)  # Keep the window open and check periodically if it's closed
}
}
for(i in files){viewAllLAZ(i,plotView = F)}
#' @param plotView boolean: TRUE if you want a generalized view of the point cloud with file name, FALSE if you want a superior rendering without the filename
#'
#' @return The RGL window displays a LAS point cloud
#'
#' @export viewAllLAZ
#' @examples
#' parentDir <- readClipboard() # Read the directory path of a folder containing several LAZ/LAS files
#' setwd(parentDir)
#' files <- list.files(pattern="*.laz")
#' for(file in files){viewAllLAS(file)}
viewAllLAZ <- function(lazFile,plotView = TRUE){
temp_laz <- lidR::readLAS(lazFile)
if(lidR::is.empty(temp_laz)){ # In case there is no LAZ
cat(paste0("Skipping empty laz file: ",lazFile))
return()
}
if(isTRUE(plotView)){
# Access XYZ
x <- temp_laz@data$X
y <- temp_laz@data$Y
z <- temp_laz@data$Z
# Plot
rgl::open3d()
rgl::plot3d(x,y,z,col=terrain.colors(length(z))[as.numeric(cut(z, breaks=length(z)))],size=3,main=lazFile,axes=F,xlab="",ylab="",zlab="")#,type="s")
}
else{
plot(temp_laz,size=4)
rgl::bgplot3d({
par(bg='black')
plot.new()
abline(v = min(temp_laz@data$X),col='white')
title(main = lazFile,line=0.5,adj=1,col.main='white',cex.main=0.8,axis=TRUE)
})
}
# Wait for the user to close the rgl window before continuing to the next file
cat("Close the rgl window to continue to the next file.\n")
while (rgl::rgl.cur() > 0) {
Sys.sleep(0.1)  # Keep the window open and check periodically if it's closed
}
}
for(i in files){viewAllLAZ(i,plotView = F)}
getwd(readClipboard())
getwd(readClipboard())
setwd(readClipboard())
files <- list.files()
files <- paste0(files,".laz")
setwd(pDir)
for(i in files){viewAllLAZ(i)}
i
getwd()
files <- gsub(".laz","_buffered.laz",files)
for(i in files){viewAllLAZ(i)}
for(i in files){viewAllLAZ(i,plotView = FALSE)}
library(lidR)
setwd(readClipboard())
lasCat <- readLAScatalog('Laz')
library(terra)
lazDir <- readClipboard()
setwd(lazDir)
lazFiles <- list.files(pattern="*.laz")
laz <- readLAS(lazFiles[1])
laz@data$EdgeOfFlightline
plot(laz@data$EdgeOfFlightline)
laz@header
dtm <- rasterize_terrain(laz,res=1,algorithm = tin())
plot(dtm)
chm <- rasterize_canopy(laz,res=1,algorithm = p2r())
plot(chm)
norm_laz <- laz - dtm
plot(norm_laz)
chm <- rasterize_canopy(norm_laz,res=1,algorithm = p2r())
plot(chm)
density <- pixel_metrics(laz, ~length(Z)/16, 4) # calculate density
plot(density)
intensity <- point_metrics(laz, ~list(imean = mean(Intensity)), k = 7, r = 3) # 3
plot(intensity)
imap <- pixel_metrics(las, ~mean(Intensity), 4, filter = ~ReturnNumber == 1L) # mapping average intensity
imap <- pixel_metrics(laz, ~mean(Intensity), 4, filter = ~ReturnNumber == 1L) # mapping average intensity
plot(imap)
metrics <- pixel_metrics(laz, ~f(Z), 10) # calculate grid metrics
f <- function(x) { # user-defined fucntion
list(mean = mean(x), sd = sd(x))
}
metrics <- pixel_metrics(laz, ~f(Z), 10) # calculate grid metrics
plot(metrics)
plot(metrics[1])
plot(metrics)
lazFile <- lazFiles[1]
file.create(gsub("laz","",lazFile))
dir.create(gsub("laz","",lazFile))
setwd(gsub("laz","",lazFile))
writeRaster(dtm,paste0(gsub("laz","",lazFile),"_DTM.tif"))
writeRaster(chm,paste0(gsub("laz","",lazFile),"_CHM.tif"))
writeRaster(density,paste0(gsub("laz","",lazFile),"_Density.tif"))
writeRaster(imap,paste0(gsub("laz","",lazFile),"_Intensity.tif"))
writeRaster(metrics,paste0(gsub("laz","",lazFile),"_Metrics.tif"))
plot(density)
lazFile <- lazFiles[2]
laz <- readLAS(lazFile)
lazFile <- lazFiles[2]
setwd("..")
lazFile <- lazFiles[2]
laz <- readLAS(lazFile)
plot(laz@data$EdgeOfFlightline)
dtm <- rasterize_terrain(laz,res=1,algorithm = tin())
plot(dtm)
norm_laz <- laz - dtm
plot(norm_laz)
chm <- rasterize_canopy(norm_laz,res=1,algorithm = p2r())
plot(chm)
density <- pixel_metrics(laz, ~length(Z)/16, 4) # calculate density
plot(density)
imap <- pixel_metrics(laz, ~mean(Intensity), 4, filter = ~ReturnNumber == 1L) # mapping average intensity
plot(imap)
f <- function(x) { # user-defined fucntion
list(mean = mean(x), sd = sd(x))
}
metrics <- pixel_metrics(laz, ~f(Z), 10) # calculate grid metrics
plot(metrics)
dir.create(gsub("laz","",lazFile))
setwd(gsub("laz","",lazFile))
writeRaster(dtm,paste0(gsub("laz","",lazFile),"_DTM.tif"))
writeRaster(chm,paste0(gsub("laz","",lazFile),"_CHM.tif"))
writeRaster(density,paste0(gsub("laz","",lazFile),"_Density.tif"))
writeRaster(imap,paste0(gsub("laz","",lazFile),"_Intensity.tif"))
writeRaster(metrics,paste0(gsub("laz","",lazFile),"_Metrics.tif"))
lazFiles <- list.files(pattern="*.laz")
lazDir <- readClipboard()
setwd(lazDir)
lazFiles <- list.files(pattern="*.laz")
lazFile <- lazFiles[1]
laz <- readLAS(lazFile)
plot(laz@data$EdgeOfFlightline)
dtm <- rasterize_terrain(laz,res=1,algorithm = tin())
plot(dtm)
norm_laz <- laz - dtm
plot(norm_laz)
chm <- rasterize_canopy(norm_laz,res=1,algorithm = p2r())
plot(chm)
density <- pixel_metrics(laz, ~length(Z)/16, 4) # calculate density
plot(density)
imap <- pixel_metrics(laz, ~mean(Intensity), 4, filter = ~ReturnNumber == 1L) # mapping average intensity
plot(imap)
f <- function(x) { # user-defined fucntion
list(mean = mean(x), sd = sd(x))
}
metrics <- pixel_metrics(laz, ~f(Z), 10) # calculate grid metrics
plot(metrics)
dir.create(gsub("laz","",lazFile))
setwd(gsub("laz","",lazFile))
writeRaster(dtm,paste0(gsub("laz","",lazFile),"_DTM.tif"))
writeRaster(chm,paste0(gsub("laz","",lazFile),"_CHM.tif"))
writeRaster(density,paste0(gsub("laz","",lazFile),"_Density.tif"))
writeRaster(imap,paste0(gsub("laz","",lazFile),"_Intensity.tif"))
writeRaster(metrics,paste0(gsub("laz","",lazFile),"_Metrics.tif"))
library(sf)
pDir <- readClipboard()
setwd(pDir)
prodPolys <- read_Sf(list.files(pattern="*.shp"))
library(sf)
prodPolys <- read_sf(list.files(pattern="*.shp"))
setwd("Stereo\Validation_areas")
setwd("Stereo/Validation_areas")
shpFiles <- list.files(pattern="*.shp")
shpFiles
shpFiles <- list.files(pattern="*.shp$")
shpFiles
stems <- read_Sf(shpFiles[14])
stems <- read_sf(shpFiles[14])
?st_intersects
?st_join
joined <- st_intersects(stems, prodPolys)
View(joined)
joined <- st_join(stems, prodPolys, join = st_intersects)
View(prodPolys)
pDir <- readClipboard()
setwd(pDir)
shpFiles <- list.files(pattern="*.shp$")
shpFiles
intrusionCodes <- read_sf(shpFiles[43])
View(intrusionCodes)
colnames(intrusionCodes)
a1_growCodes <- intrusionCodes[intrusionCodes$GrowCode == "A1"]
a1_growCodes <- intrusionCodes[intrusionCodes$GrowCode == "A1",]
View(a1_growCodes)
range(a1_growCodes$GrowD2Line)
a1_growCodes <- a1_growCodes[order(a1_growCodes$GrowD2Line)]
a1_growCodes <- a1_growCodes[order(a1_growCodes$GrowD2Line),]
hist(a1_growCodes$GrowD2Line)
hist(as.numeric(a1_growCodes$GrowD2Line))
?hist
a1_fallCodes <- intrusionCodes[intrusionCodes$FallCode == "A1",]
range(a1_fallCodes$FallD2Line)
a1_fallCodes <- a1_fallCodes[order(a1_fallCodes$FallD2Line),]
View(a1_fallCodes)
range(a1_fallCodes$DistToCent)
a1_fallCodes <- a1_fallCodes[order(a1_fallCodes$DistToCent),]
View(a1_fallCodes)
hist(as.numeric(a1_fallCodes$FallD2Line), breaks=20)
hist(as.numeric(a1_fallCodes$FallD2Line), breaks=20, xlab = "FallD2Line")
hist(as.numeric(a1_fallCodes$FallD2Line), breaks=20, xlab = "FallD2Line", main="Histogram of FallD2Line")
hist(as.numeric(a1_fallCodes$DistToCent), breaks=20, xlab = "DistToCent", main="Histogram of DistToCent")
a1_fallCodes <- a1_fallCodes[order(-a1_fallCodes$DistToCent),]
View(a1_fallCodes)
a1_fallCodes$FallD2Line <- as.numeric(a1_fallCodes$FallD2Line)
a1_fallCodes <- a1_fallCodes[order(a1_fallCodes$DistToCent),]
a1_fallCodes <- a1_fallCodes[order(a1_fallCodes$FallD2Line),]
pDir <- readcl
pDir <- readClipboard()
setwd(pDir)
library(forsite)
lazFiles <- list.files(pattern="*.las")
for(i in lazFiles){viewAllLAZ(i)}
for(i in lazFiles){viewAllLAZ(i, plotView=TRUE)}
#' @param plotView boolean: TRUE if you want a generalized view of the point cloud with file name, FALSE if you want a superior rendering with poor filename quality
#'
#' @return The RGL window displays a LAS point cloud
#'
#' @export viewAllLAZ
#' @examples
#' parentDir <- readClipboard() # Read the directory path of a folder containing several LAZ/LAS files
#' setwd(parentDir)
#' files <- list.files(pattern="*.laz")
#' for(file in files){viewAllLAS(file)}
viewAllLAZ <- function(lazFile,plotView = FALSE){
temp_laz <- lidR::readLAS(lazFile)
if(lidR::is.empty(temp_laz)){ # In case there is no LAZ
cat(paste0("Skipping empty laz file: ",lazFile))
return()
}
if(isTRUE(plotView)){
# Access XYZ
x <- temp_laz@data$X
y <- temp_laz@data$Y
z <- temp_laz@data$Z
# Plot
rgl::open3d()
rgl::plot3d(x,y,z,col=terrain.colors(length(z))[as.numeric(cut(z, breaks=length(z)))],size=3,main=lazFile,axes=F,xlab="",ylab="",zlab="")#,type="s")
}
else{
plot(temp_laz,size=4)
rgl::bgplot3d({
par(bg='black')
plot.new()
abline(v = min(temp_laz@data$X),col='white')
title(main = lazFile,line=0.5,adj=1,col.main='white',cex.main=0.8,axis=TRUE)
})
}
# Wait for the user to close the rgl window before continuing to the next file
cat("Close the rgl window to continue to the next file.\n")
while (rgl::rgl.cur() > 0) {
Sys.sleep(0.1)  # Keep the window open and check periodically if it's closed
}
}
for(i in lazFiles){viewAllLAZ(i)}
#' @param plotView boolean: TRUE if you want a generalized view of the point cloud with file name, FALSE if you want a superior rendering with poor filename quality
#'
#' @return The RGL window displays a LAS point cloud
#'
#' @export viewAllLAZ
#' @examples
#' parentDir <- readClipboard() # Read the directory path of a folder containing several LAZ/LAS files
#' setwd(parentDir)
#' files <- list.files(pattern="*.laz")
#' for(file in files){viewAllLAS(file)}
viewAllLAZ <- function(lazFile,plotView = FALSE){
temp_laz <- lidR::readLAS(lazFile)
if(lidR::is.empty(temp_laz)){ # In case there is no LAZ
cat(paste0("Skipping empty laz file: ",lazFile))
return()
}
if(isTRUE(plotView)){
# Access XYZ
x <- temp_laz@data$X
y <- temp_laz@data$Y
z <- temp_laz@data$Z
# Plot
rgl::open3d()
rgl::plot3d(x,y,z,col=terrain.colors(length(z))[as.numeric(cut(z, breaks=length(z)))],size=3,main=lazFile,axes=F,xlab="",ylab="",zlab="")#,type="s")
}
else{
plot(temp_laz,size=4)
rgl::bgplot3d({
par(bg='black')
plot.new()
abline(v = min(temp_laz@data$X),col='white')
title(main = lazFile,line=0.5,adj=1,col.main='white',cex.main=0.8,axis=TRUE)
})
}
# Wait for the user to close the rgl window before continuing to the next file
cat("Close the rgl window to continue to the next file.\n")
while (rgl::rgl.cur() > 0) {
Sys.sleep(0.1)  # Keep the window open and check periodically if it's closed
}
}
detach("package:forsite", unload = TRUE)
for(i in lazFiles){viewAllLAZ(i)}
plot(i)
#' @param plotView boolean: TRUE if you want a generalized view of the point cloud with file name, FALSE if you want a superior rendering with poor filename quality
#'
#' @return The RGL window displays a LAS point cloud
#'
#' @export viewAllLAZ
#' @examples
#' parentDir <- readClipboard() # Read the directory path of a folder containing several LAZ/LAS files
#' setwd(parentDir)
#' files <- list.files(pattern="*.laz")
#' for(file in files){viewAllLAS(file)}
viewAllLAZ <- function(lazFile,plotView = FALSE){
temp_laz <- lidR::readLAS(lazFile)
if(lidR::is.empty(temp_laz)){ # In case there is no LAZ
cat(paste0("Skipping empty laz file: ",lazFile))
return()
}
if(isTRUE(plotView)){
# Access XYZ
x <- temp_laz@data$X
y <- temp_laz@data$Y
z <- temp_laz@data$Z
# Plot
rgl::open3d()
rgl::plot3d(x,y,z,col=terrain.colors(length(z))[as.numeric(cut(z, breaks=length(z)))],size=3,main=lazFile,axes=F,xlab="",ylab="",zlab="")#,type="s")
}
else{
lidR::plot(temp_laz,size=4)
rgl::bgplot3d({
par(bg='black')
plot.new()
abline(v = min(temp_laz@data$X),col='white')
title(main = lazFile,line=0.5,adj=1,col.main='white',cex.main=0.8,axis=TRUE)
})
}
# Wait for the user to close the rgl window before continuing to the next file
cat("Close the rgl window to continue to the next file.\n")
while (rgl::rgl.cur() > 0) {
Sys.sleep(0.1)  # Keep the window open and check periodically if it's closed
}
}
for(i in lazFiles){viewAllLAZ(i)}
for(i in lazFiles){viewAllLAZ(i)}
lazFiles <- list.files(pattern="*.las")
for(i in lazFiles){viewAllLAZ(i)}
