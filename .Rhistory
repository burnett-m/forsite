system(paste(basename(voxelSegmentationEXE_directory),"-OP_TYPE=1",cfgFilename,sep=" "))
setwd(resultsDirectory)
file.copy(from = paste0("target",base_target), to = paste0(Dropbox_directory,"target",base_target))
allPinTestSummary <- read.csv(allPinTestSummary_directory)
knitr::kable(allPinTestSummary[c(1:15)])
}
readClipboard()
voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,dropbox_dir,allPinTestSummary_dir)
voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,dropbox_dir,allPinTestSummary_dir)
voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,dropbox_dir,allPinTestSummary_dir)
cfgFilename <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\_TolkoGS_NewFormat_Voxel_SegCal.cfg"
resultsDirectory <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget"
voxelSegEXE_dir <- "C:\\Forsite\\voxelSeg_training\\VoxelSegEXE\\VoxelSegmentationCPU.exe"
dropbox_dir <- "C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Tolko\\Tolko_Sask\\_GreenSled\\SegCal\\_Results"
allPinTestSummary_dir <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget\\all_Pin_All_Test_Summary_No_Edge.csv"
voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,dropbox_dir,allPinTestSummary_dir)
#'
#' @returns New voxel segmentation with statistical results from the main columns
#'
#' @examples
#' #cfgFilename <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\_TolkoGS_NewFormat_Voxel_SegCal.cfg"
#' #resultsDirectory <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget"
#' #voxelSegEXE_dir <- "C:\\Forsite\\voxelSeg_training\\VoxelSegEXE\\VoxelSegmentationCPU.exe"
#' #allPinTestSummary_dir <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget\\all_Pin_All_Test_Summary_No_Edge.csv"
#' #voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,allPinTestSummary_dir)
#'
voxelSegCal_NewSegmentation <- function(CFG_filename, resultsDirectory, voxelSegmentationEXE_directory, Dropbox_directory, allPinTestSummary_directory){
# Function for updating the CFG target directory name
create_new_target_dir <- function(target_path) {
target_basename <- basename(target)
target_dirname <- dirname(target)
# Filter only those matching "target" followed by a number
target_dirs <- grep("^target\\d+$", target_basename, value = TRUE)
# Extract numbers
target_nums <- as.numeric(gsub("target", "", target_dirs))
# Get next number
next_num <- if (length(target_nums) == 0) 1 else max(target_nums) + 1
# Create new directory name
new_dir_name <- paste0("target", next_num)
new_dir_path <- file.path(target_dirname, new_dir_name)
new_dir_path <- paste0(gsub("/","\\\\",new_dir_path),"\\")
return(new_dir_path)
}
cfg <- ini::read.ini(CFG_filename) # Read CFG file
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
target <- cfg$`File/Directory Config`$TARGETDIR
cfg$`File/Directory Config`$TARGETDIR <- create_new_target_dir(target)
base_target <- readline("Which target number should we base this new segmentation on?")
setwd(paste0(resultsDirectory,"\\target",base_target))
base_target_CFG <- ini::read.ini(list.files(pattern="*.cfg"))
cfg$`Seg Params` <- base_target_CFG$`Seg Params`
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
print(segParams)
parameter_to_tweak <- readline("Which parameter NUMBER should we adjust?")
print(cfg$`Seg Params`[segParams[as.numeric(parameter_to_tweak)]])
parameter_value <- readline("What should we change it to?")
cfg$`Seg Params`[segParams[as.numeric(parameter_to_tweak)]] <- parameter_value
ini::write.ini(cfg,cfgFilename)
setwd(dirname(voxelSegmentationEXE_directory))
system(paste(basename(voxelSegmentationEXE_directory),"-OP_TYPE=1",cfgFilename,sep=" "))
setwd(resultsDirectory)
file.copy(from = paste0("target",base_target), to = paste0(Dropbox_directory,"target",base_target))
allPinTestSummary <- read.csv(allPinTestSummary_directory)
knitr::kable(allPinTestSummary[c(1:15)])
}
cfgFilename <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\_TolkoGS_NewFormat_Voxel_SegCal.cfg"
resultsDirectory <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget"
voxelSegEXE_dir <- "C:\\Forsite\\voxelSeg_training\\VoxelSegEXE\\VoxelSegmentationCPU.exe"
dropbox_dir <- "C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Tolko\\Tolko_Sask\\_GreenSled\\SegCal\\_Results"
allPinTestSummary_dir <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget\\all_Pin_All_Test_Summary_No_Edge.csv"
voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,dropbox_dir,allPinTestSummary_dir)
#' @returns New voxel segmentation with statistical results from the main columns
#'
#' @examples
#' #cfgFilename <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\_TolkoGS_NewFormat_Voxel_SegCal.cfg"
#' #resultsDirectory <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget"
#' #voxelSegEXE_dir <- "C:\\Forsite\\voxelSeg_training\\VoxelSegEXE\\VoxelSegmentationCPU.exe"
#' #dropbox_dir <- "C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Tolko\\Tolko_Sask\\_GreenSled\\SegCal\\_Results"
#' #allPinTestSummary_dir <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget\\all_Pin_All_Test_Summary_No_Edge.csv"
#' #voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,allPinTestSummary_dir)
#'
voxelSegCal_NewSegmentation <- function(CFG_filename, resultsDirectory, voxelSegmentationEXE_directory, Dropbox_directory, allPinTestSummary_directory){
# Function for updating the CFG target directory name
create_new_target_dir <- function(target_path) {
target_basename <- basename(target)
target_dirname <- dirname(target)
# Filter only those matching "target" followed by a number
target_dirs <- grep("^target\\d+$", target_basename, value = TRUE)
# Extract numbers
target_nums <- as.numeric(gsub("target", "", target_dirs))
# Get next number
next_num <- if (length(target_nums) == 0) 1 else max(target_nums) + 1
# Create new directory name
new_dir_name <- paste0("target", next_num)
new_dir_path <- file.path(target_dirname, new_dir_name)
new_dir_path <- paste0(gsub("/","\\\\",new_dir_path),"\\")
return(new_dir_path)
}
cfg <- ini::read.ini(CFG_filename) # Read CFG file
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
target <- cfg$`File/Directory Config`$TARGETDIR
cfg$`File/Directory Config`$TARGETDIR <- create_new_target_dir(target)
base_target <- readline("Which target number should we base this new segmentation on?")
setwd(paste0(resultsDirectory,"\\target",base_target))
base_target_CFG <- ini::read.ini(list.files(pattern="*.cfg"))
cfg$`Seg Params` <- base_target_CFG$`Seg Params`
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
print(segParams)
parameter_to_tweak <- readline("Which parameter NUMBER should we adjust?")
print(cfg$`Seg Params`[segParams[as.numeric(parameter_to_tweak)]])
parameter_value <- readline("What should we change it to?")
cfg$`Seg Params`[segParams[as.numeric(parameter_to_tweak)]] <- parameter_value
ini::write.ini(cfg,cfgFilename)
setwd(dirname(voxelSegmentationEXE_directory))
system(paste(basename(voxelSegmentationEXE_directory),"-OP_TYPE=1",cfgFilename,sep=" "))
setwd(resultsDirectory)
file.copy(from = paste0("target",base_target), to = paste0(Dropbox_directory,"target",base_target))
allPinTestSummary <- read.csv(allPinTestSummary_directory)
knitr::kable(allPinTestSummary[c(1:15)])
}
voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,dropbox_dir,allPinTestSummary_dir)
voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,dropbox_dir,allPinTestSummary_dir)
voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,dropbox_dir,allPinTestSummary_dir)
voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,dropbox_dir,allPinTestSummary_dir)
#' @returns New voxel segmentation with statistical results from the main columns
#'
#' @examples
#' #cfgFilename <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\_TolkoGS_NewFormat_Voxel_SegCal.cfg"
#' #resultsDirectory <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget"
#' #voxelSegEXE_dir <- "C:\\Forsite\\voxelSeg_training\\VoxelSegEXE\\VoxelSegmentationCPU.exe"
#' #dropbox_dir <- "C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Tolko\\Tolko_Sask\\_GreenSled\\SegCal\\_Results"
#' #allPinTestSummary_dir <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget\\all_Pin_All_Test_Summary_No_Edge.csv"
#' #voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,allPinTestSummary_dir)
#'
voxelSegCal_NewSegmentation <- function(CFG_filename, resultsDirectory, voxelSegmentationEXE_directory, Dropbox_directory, allPinTestSummary_directory){
# Function for updating the CFG target directory name
create_new_target_dir <- function(target_path) {
target_basename <- basename(target)
target_dirname <- dirname(target)
# Filter only those matching "target" followed by a number
target_dirs <- grep("^target\\d+$", target_basename, value = TRUE)
# Extract numbers
target_nums <- as.numeric(gsub("target", "", target_dirs))
# Get next number
next_num <- if (length(target_nums) == 0) 1 else max(target_nums) + 1
# Create new directory name
new_dir_name <- paste0("target", next_num)
new_dir_path <- file.path(target_dirname, new_dir_name)
new_dir_path <- paste0(gsub("/","\\\\",new_dir_path),"\\")
return(new_dir_path)
}
cfg <- ini::read.ini(CFG_filename) # Read CFG file
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
target <- cfg$`File/Directory Config`$TARGETDIR
cfg$`File/Directory Config`$TARGETDIR <- create_new_target_dir(target)
base_target <- readline("Which target number should we base this new segmentation on?")
setwd(paste0(resultsDirectory,"\\target",base_target))
base_target_CFG <- ini::read.ini(list.files(pattern="*.cfg"))
cfg$`Seg Params` <- base_target_CFG$`Seg Params`
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
print(segParams)
parameter_to_tweak <- readline("Which parameter NUMBER should we adjust?")
print(cfg$`Seg Params`[segParams[as.numeric(parameter_to_tweak)]])
parameter_value <- readline("What should we change it to?")
cfg$`Seg Params`[segParams[as.numeric(parameter_to_tweak)]] <- parameter_value
ini::write.ini(cfg,cfgFilename)
setwd(dirname(voxelSegmentationEXE_directory))
system(paste(basename(voxelSegmentationEXE_directory),"-OP_TYPE=1",cfgFilename,sep=" "))
setwd(resultsDirectory)
file.copy(from = paste0("target",base_target), to = paste0(Dropbox_directory,"target",base_target), recursive = TRUE)
allPinTestSummary <- read.csv(allPinTestSummary_directory)
knitr::kable(allPinTestSummary[c(1:15)])
}
voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,dropbox_dir,allPinTestSummary_dir)
#' @returns New voxel segmentation with statistical results from the main columns
#'
#' @examples
#' #cfgFilename <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\_TolkoGS_NewFormat_Voxel_SegCal.cfg"
#' #resultsDirectory <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget"
#' #voxelSegEXE_dir <- "C:\\Forsite\\voxelSeg_training\\VoxelSegEXE\\VoxelSegmentationCPU.exe"
#' #dropbox_dir <- "C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Tolko\\Tolko_Sask\\_GreenSled\\SegCal\\_Results"
#' #allPinTestSummary_dir <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget\\all_Pin_All_Test_Summary_No_Edge.csv"
#' #voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,allPinTestSummary_dir)
#'
voxelSegCal_NewSegmentation <- function(CFG_filename, resultsDirectory, voxelSegmentationEXE_directory, Dropbox_directory, allPinTestSummary_directory){
# Function for updating the CFG target directory name
create_new_target_dir <- function(target_path) {
target_basename <- basename(target)
target_dirname <- dirname(target)
# Filter only those matching "target" followed by a number
target_dirs <- grep("^target\\d+$", target_basename, value = TRUE)
# Extract numbers
target_nums <- as.numeric(gsub("target", "", target_dirs))
# Get next number
next_num <- if (length(target_nums) == 0) 1 else max(target_nums) + 1
# Create new directory name
new_dir_name <- paste0("target", next_num)
new_dir_path <- file.path(target_dirname, new_dir_name)
new_dir_path <- paste0(gsub("/","\\\\",new_dir_path),"\\")
return(new_dir_path)
}
cfg <- ini::read.ini(CFG_filename) # Read CFG file
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
target <- cfg$`File/Directory Config`$TARGETDIR
cfg$`File/Directory Config`$TARGETDIR <- create_new_target_dir(target)
base_target <- readline("Which target number should we base this new segmentation on?")
setwd(paste0(resultsDirectory,"\\target",base_target))
base_target_CFG <- ini::read.ini(list.files(pattern="*.cfg"))
cfg$`Seg Params` <- base_target_CFG$`Seg Params`
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
print(segParams)
parameter_to_tweak <- readline("Which parameter NUMBER should we adjust?")
print(cfg$`Seg Params`[segParams[as.numeric(parameter_to_tweak)]])
parameter_value <- readline("What should we change it to?")
cfg$`Seg Params`[segParams[as.numeric(parameter_to_tweak)]] <- parameter_value
ini::write.ini(cfg,cfgFilename)
setwd(dirname(voxelSegmentationEXE_directory))
system(paste(basename(voxelSegmentationEXE_directory),"-OP_TYPE=1",cfgFilename,sep=" "))
setwd(resultsDirectory)
file.copy(from = paste0("target",base_target), to = Dropbox_directory, recursive = TRUE)
allPinTestSummary <- read.csv(allPinTestSummary_directory)
knitr::kable(allPinTestSummary[c(1:15)])
}
#' @returns New voxel segmentation with statistical results from the main columns
#'
#' @examples
#' #cfgFilename <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\_TolkoGS_NewFormat_Voxel_SegCal.cfg"
#' #resultsDirectory <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget"
#' #voxelSegEXE_dir <- "C:\\Forsite\\voxelSeg_training\\VoxelSegEXE\\VoxelSegmentationCPU.exe"
#' #dropbox_dir <- "C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Tolko\\Tolko_Sask\\_GreenSled\\SegCal\\_Results"
#' #allPinTestSummary_dir <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget\\all_Pin_All_Test_Summary_No_Edge.csv"
#' #voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,allPinTestSummary_dir)
#'
voxelSegCal_NewSegmentation <- function(CFG_filename, resultsDirectory, voxelSegmentationEXE_directory, Dropbox_directory, allPinTestSummary_directory){
# Function for updating the CFG target directory name
create_new_target_dir <- function(target_path) {
target_basename <- basename(target)
target_dirname <- dirname(target)
# Filter only those matching "target" followed by a number
target_dirs <- grep("^target\\d+$", target_basename, value = TRUE)
# Extract numbers
target_nums <- as.numeric(gsub("target", "", target_dirs))
# Get next number
next_num <- if (length(target_nums) == 0) 1 else max(target_nums) + 1
# Create new directory name
new_dir_name <- paste0("target", next_num)
new_dir_path <- file.path(target_dirname, new_dir_name)
new_dir_path <- paste0(gsub("/","\\\\",new_dir_path),"\\")
return(new_dir_path)
}
cfg <- ini::read.ini(CFG_filename) # Read CFG file
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
target <- cfg$`File/Directory Config`$TARGETDIR
cfg$`File/Directory Config`$TARGETDIR <- create_new_target_dir(target)
base_target <- readline("Which target number should we base this new segmentation on?")
setwd(paste0(resultsDirectory,"\\target",base_target))
base_target_CFG <- ini::read.ini(list.files(pattern="*.cfg"))
cfg$`Seg Params` <- base_target_CFG$`Seg Params`
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
print(segParams)
parameter_to_tweak <- readline("Which parameter NUMBER should we adjust?")
print(cfg$`Seg Params`[segParams[as.numeric(parameter_to_tweak)]])
parameter_value <- readline("What should we change it to?")
cfg$`Seg Params`[segParams[as.numeric(parameter_to_tweak)]] <- parameter_value
ini::write.ini(cfg,cfgFilename)
setwd(dirname(voxelSegmentationEXE_directory))
system(paste(basename(voxelSegmentationEXE_directory),"-OP_TYPE=1",cfgFilename,sep=" "))
setwd(resultsDirectory)
file.copy(from = paste0("target",base_target), to = Dropbox_directory, recursive = TRUE)
allPinTestSummary <- read.csv(allPinTestSummary_directory)
knitr::kable(allPinTestSummary[c(1:15)])
}
voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,dropbox_dir,allPinTestSummary_dir)
?dir_copy
base_target
base_target <- 89
setwd(resultsDirectory)
fs::dir_copy(paste0("target",base_target), dropbox_dir)
#' @returns New voxel segmentation with statistical results from the main columns
#'
#' @examples
#' #cfgFilename <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\_TolkoGS_NewFormat_Voxel_SegCal.cfg"
#' #resultsDirectory <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget"
#' #voxelSegEXE_dir <- "C:\\Forsite\\voxelSeg_training\\VoxelSegEXE\\VoxelSegmentationCPU.exe"
#' #dropbox_dir <- "C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Tolko\\Tolko_Sask\\_GreenSled\\SegCal\\_Results"
#' #allPinTestSummary_dir <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget\\all_Pin_All_Test_Summary_No_Edge.csv"
#' #voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,allPinTestSummary_dir)
#'
voxelSegCal_NewSegmentation <- function(CFG_filename, resultsDirectory, voxelSegmentationEXE_directory, Dropbox_directory, allPinTestSummary_directory){
# Function for updating the CFG target directory name
create_new_target_dir <- function(target_path) {
target_basename <- basename(target)
target_dirname <- dirname(target)
# Filter only those matching "target" followed by a number
target_dirs <- grep("^target\\d+$", target_basename, value = TRUE)
# Extract numbers
target_nums <- as.numeric(gsub("target", "", target_dirs))
# Get next number
next_num <- if (length(target_nums) == 0) 1 else max(target_nums) + 1
# Create new directory name
new_dir_name <- paste0("target", next_num)
new_dir_path <- file.path(target_dirname, new_dir_name)
new_dir_path <- paste0(gsub("/","\\\\",new_dir_path),"\\")
return(new_dir_path)
}
cfg <- ini::read.ini(CFG_filename) # Read CFG file
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
target <- cfg$`File/Directory Config`$TARGETDIR
cfg$`File/Directory Config`$TARGETDIR <- create_new_target_dir(target)
base_target <- readline("Which target number should we base this new segmentation on?")
setwd(paste0(resultsDirectory,"\\target",base_target))
base_target_CFG <- ini::read.ini(list.files(pattern="*.cfg"))
cfg$`Seg Params` <- base_target_CFG$`Seg Params`
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
print(segParams)
parameter_to_tweak <- readline("Which parameter NUMBER should we adjust?")
print(cfg$`Seg Params`[segParams[as.numeric(parameter_to_tweak)]])
parameter_value <- readline("What should we change it to?")
cfg$`Seg Params`[segParams[as.numeric(parameter_to_tweak)]] <- parameter_value
ini::write.ini(cfg,cfgFilename)
setwd(dirname(voxelSegmentationEXE_directory))
system(paste(basename(voxelSegmentationEXE_directory),"-OP_TYPE=1",cfgFilename,sep=" "))
setwd(resultsDirectory)
fs::dir_copy(paste0("target",base_target), Dropbox_directory)
allPinTestSummary <- read.csv(allPinTestSummary_directory)
knitr::kable(allPinTestSummary[c(1:15)])
}
voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,dropbox_dir,allPinTestSummary_dir)
cfg <- ini::read.ini(CFG_filename) # Read CFG file
# Function for updating the CFG target directory name
create_new_target_dir <- function(target_path) {
target_basename <- basename(target)
target_dirname <- dirname(target)
# Filter only those matching "target" followed by a number
target_dirs <- grep("^target\\d+$", target_basename, value = TRUE)
# Extract numbers
target_nums <- as.numeric(gsub("target", "", target_dirs))
# Get next number
next_num <- if (length(target_nums) == 0) 1 else max(target_nums) + 1
# Create new directory name
new_dir_name <- paste0("target", next_num)
new_dir_path <- file.path(target_dirname, new_dir_name)
new_dir_path <- paste0(gsub("/","\\\\",new_dir_path),"\\")
return(new_dir_path)
}
cfg <- ini::read.ini(CFG_Filename) # Read CFG file
cfg <- ini::read.ini(CFGFilename) # Read CFG file
cfg <- ini::read.ini(cfgFilename)
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
target <- cfg$`File/Directory Config`$TARGETDIR
cfg$`File/Directory Config`$TARGETDIR <- create_new_target_dir(target)
cfg$`File/Directory Config`$TARGETDIR
strsplit(cfg$`File/Directory Config`$TARGETDIR,"\\\\")
strsplit(cfg$`File/Directory Config`$TARGETDIR,"\\\\")[-1]
a <- strsplit(cfg$`File/Directory Config`$TARGETDIR,"\\\\")
a[length(a)]
a
a <- strsplit(cfg$`File/Directory Config`$TARGETDIR,"\\\\")[1]
a
a <- strsplit(cfg$`File/Directory Config`$TARGETDIR,"\\\\")[[1]]
a
create_new_target_dir(target)
newTargetDir <- create_new_target_dir(target)
strsplit(newTargetDir)
strsplit(newTargetDir,"\\\\")
newTargetDir_split <- strsplit(newTargetDir,"\\\\")
newTargetDir_split <- strsplit(newTargetDir,"\\\\")[[1]]
newTargetDir_split
newTargetDir_split[length(newTargetDir_split)]
fs::dir_copy(newTargetDir_newTarget, Dropbox_directory)
newTargetDir_newTarget <- newTargetDir_split[length(newTargetDir_split)]
fs::dir_copy(newTargetDir_newTarget, Dropbox_directory)
#' @returns New voxel segmentation with statistical results from the main columns
#'
#' @examples
#' #cfgFilename <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\_TolkoGS_NewFormat_Voxel_SegCal.cfg"
#' #resultsDirectory <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget"
#' #voxelSegEXE_dir <- "C:\\Forsite\\voxelSeg_training\\VoxelSegEXE\\VoxelSegmentationCPU.exe"
#' #dropbox_dir <- "C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Tolko\\Tolko_Sask\\_GreenSled\\SegCal\\_Results"
#' #allPinTestSummary_dir <- "C:\\Forsite\\Tolko\\GreenSled_voxelSeg\\BaseTarget\\all_Pin_All_Test_Summary_No_Edge.csv"
#' #voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,allPinTestSummary_dir)
#'
voxelSegCal_NewSegmentation <- function(CFG_filename, resultsDirectory, voxelSegmentationEXE_directory, Dropbox_directory, allPinTestSummary_directory){
# Function for updating the CFG target directory name
create_new_target_dir <- function(target_path) {
target_basename <- basename(target)
target_dirname <- dirname(target)
# Filter only those matching "target" followed by a number
target_dirs <- grep("^target\\d+$", target_basename, value = TRUE)
# Extract numbers
target_nums <- as.numeric(gsub("target", "", target_dirs))
# Get next number
next_num <- if (length(target_nums) == 0) 1 else max(target_nums) + 1
# Create new directory name
new_dir_name <- paste0("target", next_num)
new_dir_path <- file.path(target_dirname, new_dir_name)
new_dir_path <- paste0(gsub("/","\\\\",new_dir_path),"\\")
return(new_dir_path)
}
cfg <- ini::read.ini(CFG_filename) # Read CFG file
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
target <- cfg$`File/Directory Config`$TARGETDIR
newTargetDir <- create_new_target_dir(target)
cfg$`File/Directory Config`$TARGETDIR <- newTargetDir
base_target <- readline("Which target number should we base this new segmentation on?")
setwd(paste0(resultsDirectory,"\\target",base_target))
base_target_CFG <- ini::read.ini(list.files(pattern="*.cfg"))
cfg$`Seg Params` <- base_target_CFG$`Seg Params`
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
print(segParams)
parameter_to_tweak <- readline("Which parameter NUMBER should we adjust?")
print(cfg$`Seg Params`[segParams[as.numeric(parameter_to_tweak)]])
parameter_value <- readline("What should we change it to?")
cfg$`Seg Params`[segParams[as.numeric(parameter_to_tweak)]] <- parameter_value
ini::write.ini(cfg,cfgFilename)
setwd(dirname(voxelSegmentationEXE_directory))
system(paste(basename(voxelSegmentationEXE_directory),"-OP_TYPE=1",cfgFilename,sep=" "))
setwd(resultsDirectory)
newTargetDir_split <- strsplit(newTargetDir,"\\\\")[[1]]
newTargetDir_newTarget <- newTargetDir_split[length(newTargetDir_split)]
fs::dir_copy(newTargetDir_newTarget, Dropbox_directory)
allPinTestSummary <- read.csv(allPinTestSummary_directory)
knitr::kable(allPinTestSummary[c(1:15)])
}
voxelSegCal_NewSegmentation(cfgFilename,resultsDirectory,voxelSegEXE_dir,dropbox_dir,allPinTestSummary_dir)
setwd(readClipboard())
file <- list.files
file <- list.files()
file.rename(file,gsub("_Makwa","",file))
setwd(readClipboard())
poi_dbf <- foreign::read.dbf(list.files(pattern="*.dbf"))
setwd(readClipboard())
outlines_dbf <- foreign::read.dbf(list.files(pattern="*.dbf"))
unique(outlines_dbf$PLOT_ID)
unique(outlines_dbf$BASE_OBJEC)
unique(poi_dbf$PLOT_NAME)
View(poi_dbf)
resultsDir <- readClipboard()
remotes::install_github('burnett-m/forsite')
library(forsite)
remove.packages("forsite")
remotes::install_github('burnett-m/forsite')
remotes::install_github('burnett-m/forsite')
roxygen2::roxygenize()
remotes::install_github('burnett-m/forsite')
remove.packages("forsite")
remotes::install_github('burnett-m/forsite')
library(forsite)
readClipboard()
?voxelSegCal_NewSegmentation
readClipboard()
readClipboard()
readClipboard()
readClipboard()
voxelSegCal_NewSegmentation(cfgFile,resultsDir,voxelSegEXE,db_dir,allPinTest)
resultsDir <- "C:\\Forsite\\Tolko\\Bronson_voxelSeg\\BaseTarget"
allPinTest <- "C:\\Forsite\\Tolko\\Bronson_voxelSeg\\BaseTarget\\all_Pin_All_Test_Summary_No_Edge.csv"
cfgFile <- "C:\\Forsite\\Tolko\\Bronson_voxelSeg\\_TolkoGS_NewFormat_Voxel_SegCal.cfg"
db_dir <- "C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Tolko\\Tolko_Sask\\_Bronson_Makwa\\SegCal\\_Results"
voxelSegEXE <- "C:\\Forsite\\voxelSeg_training\\VoxelSegEXE_07152025\\Release\\VoxelSegmentationCPU.exe"
voxelSegCal_NewSegmentation(cfgFile,resultsDir,voxelSegEXE,db_dir,allPinTest)
readClipboard()
cfgFile <- "C:\\Forsite\\Tolko\\Bronson_voxelSeg\\_TolkoGS_NewFormat_Voxel_SegCal.cfg"
voxelSegCal_NewSegmentation(cfgFile,resultsDir,voxelSegEXE,db_dir,allPinTest)
# Function for updating the CFG target directory name
create_new_target_dir <- function(target_path) {
target_basename <- basename(target)
target_dirname <- dirname(target)
# Filter only those matching "target" followed by a number
target_dirs <- grep("^target\\d+$", target_basename, value = TRUE)
# Extract numbers
target_nums <- as.numeric(gsub("target", "", target_dirs))
# Get next number
next_num <- if (length(target_nums) == 0) 1 else max(target_nums) + 1
# Create new directory name
new_dir_name <- paste0("target", next_num)
new_dir_path <- file.path(target_dirname, new_dir_name)
new_dir_path <- paste0(gsub("/","\\\\",new_dir_path),"\\")
return(new_dir_path)
}
CFG_filename <- cfgFile
cfg <- ini::read.ini(CFG_filename) # Read CFG file
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
target <- cfg$`File/Directory Config`$TARGETDIR
newTargetDir <- create_new_target_dir(target)
cfg$`File/Directory Config`$TARGETDIR <- newTargetDir
base_target <- readline("Which target number should we base this new segmentation on?")
resultsDirectory <- resultsDir
base_target_CFG <- ini::read.ini(list.files(pattern="*.cfg"))
cfg$`Seg Params` <- base_target_CFG$`Seg Params`
segParams <- colnames(as.data.frame(cfg$`Seg Params`))
print(segParams)
parameter_to_tweak <- readline("Which parameter NUMBER should we adjust?")
print(cfg$`Seg Params`[segParams[as.numeric(parameter_to_tweak)]])
parameter_value <- readline("What should we change it to?")
cfg$`Seg Params`[segParams[as.numeric(parameter_to_tweak)]] <- parameter_value
ini::write.ini(cfg,cfgFilename)
remotes::install_github('burnett-m/forsite')
library(forsite)
resultsDir <- "C:\\Forsite\\Tolko\\Bronson_voxelSeg\\BaseTarget"
allPinTest <- "C:\\Forsite\\Tolko\\Bronson_voxelSeg\\BaseTarget\\all_Pin_All_Test_Summary_No_Edge.csv"
cfgFile <- "C:\\Forsite\\Tolko\\Bronson_voxelSeg\\_TolkoGS_NewFormat_Voxel_SegCal.cfg"
db_dir <- "C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Tolko\\Tolko_Sask\\_Bronson_Makwa\\SegCal\\_Results"
voxelSegEXE <- "C:\\Forsite\\voxelSeg_training\\VoxelSegEXE_07152025\\Release\\VoxelSegmentationCPU.exe"
voxelSegCal_NewSegmentation(cfgFile,resultsDir,voxelSegEXE,db_dir,allPinTest)
voxelSegCal_NewSegmentation
remotes::install_github('burnett-m/forsite')
library(forsite)
voxelSegCal_NewSegmentation(cfgFile,resultsDir,voxelSegEXE,db_dir,allPinTest)
library(forsite)
remove.packages("forsite")
remotes::install_github('burnett-m/forsite')
