ggsave(
filename = "combined_height_plotFull.png",
plot = plot2,
width = 8,       # in inches
height = 12,      # in inches
dpi = 100,        # high resolution
units = "in",
device = "png"
)
# Save the combined plot as a large JPG
ggsave(
filename = "combined_height_plot10M.png",
plot = plot2,
width = 18,       # in inches
height = 10,      # in inches
dpi = 100,        # high resolution
units = "in",
bg = "white",
device = "png"
)
library(ggplot2) ; library(dplyr) ; library(patchwork)
dbh_dir <- "S:\\1845\\4\\03_MappingAnalysisData\\02_Data\\09_QC_GDB\\Scripts\\04_DBH_graphs\\dbh_csvs"
spp <- c('aw', 'pb', 'bw', 'fb', 'lt', 'pl', 'dp', 'sb', 'sw', 'sn')
setwd(dbh_dir)
if(!dir.exists("dbh_graphs_sample_colortest_R")){
dir.create("dbh_graphs_sample_colortest_R")
}
for(sp in spp){
start_time <- Sys.time()
print(paste0("Processing ",sp))
dbh_csv <- read.csv(paste0("result_",sp,"_FINAL.csv"))
dbh_csv$HEXID <- sapply(strsplit(dbh_csv$unique_id,"_"), `[`,1)
dbh_csv_subset <- dbh_csv
# create histogram and scatter plots for the species
xmin <- 5
xmax <- max(dbh_csv_subset$height)
# Histogram plot
plot1 <- ggplot(dbh_csv_subset, aes(x = height)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", boundary = xmin) +
xlim(xmin, xmax) +
labs(
x = "Height m",
y = "Count",
title = toupper(sp) %>% paste("Height Histogram and Height vs DBH Scatter Plot", sep = " ")
) +
theme_minimal()
# Scatter plot
plot2 <- ggplot(dbh_csv_subset, aes(x = height, y = canopyarea)) +
geom_point(size = 1, alpha = 0.1, color = "blue") +
xlim(xmin, xmax) +
labs(x = "Height m", y = "Canopy Area (m2)") +
theme_minimal()
# Combine the two plots vertically
combined_plot <- plot1 / plot2 + plot_layout(heights = c(3, 4))
# Print plot
#print(combined_plot)
# Construct output file path
output_file <- file.path("dbh_graphs_sample_colortest_R", paste0(sp, "_CA_HT_sample.png"))
# Save the combined plot
ggsave(
filename = output_file,
plot = combined_plot,
dpi = 150,
width = 8,
height = 12,
bg = "white"
)
end_time <- Sys.time()
duration <- end_time - start_time
print(duration)
}
readClipboard()
dbh_dir <- "S:\\1845\\3\\03_MappingAnalysisData\\02_Data\\09_QC_GDB\\Scripts\\05_DBH_graphs\\height_dbh_csvs"
setwd(dbh_dir)
if(!dir.exists("dbh_graphs_sample_colortest_R")){
dir.create("dbh_graphs_sample_colortest_R")
}
spp <- c('aw', 'pb', 'bw', 'fb', 'lt', 'pl', 'dp', 'sb', 'sw', 'sn')
for(sp in spp){
start_time <- Sys.time()
print(paste0("Processing ",sp))
dbh_csv <- read.csv(paste0("result_",sp,"_FINAL.csv"))
dbh_csv$HEXID <- sapply(strsplit(dbh_csv$unique_id,"_"), `[`,1)
dbh_csv_subset <- dbh_csv
# create histogram and scatter plots for the species
xmin <- 5
xmax <- max(dbh_csv_subset$height)
# Histogram plot
plot1 <- ggplot(dbh_csv_subset, aes(x = height)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", boundary = xmin) +
xlim(xmin, xmax) +
labs(
x = "Height m",
y = "Count",
title = toupper(sp) %>% paste("Height Histogram and Height vs DBH Scatter Plot", sep = " ")
) +
theme_minimal()
# Scatter plot
plot2 <- ggplot(dbh_csv_subset, aes(x = height, y = canopyarea)) +
geom_point(size = 1, alpha = 0.1, color = "blue") +
xlim(xmin, xmax) +
labs(x = "Height m", y = "Canopy Area (m2)") +
theme_minimal()
# Combine the two plots vertically
combined_plot <- plot1 / plot2 + plot_layout(heights = c(3, 4))
# Print plot
#print(combined_plot)
# Construct output file path
output_file <- file.path("dbh_graphs_sample_colortest_R", paste0(sp, "_CA_HT_sample.png"))
# Save the combined plot
ggsave(
filename = output_file,
plot = combined_plot,
dpi = 150,
width = 8,
height = 12,
bg = "white"
)
end_time <- Sys.time()
duration <- end_time - start_time
print(duration)
}
View(temp_sp)
dbh_csv <- read.csv(paste0("result_",sp,"_FINAL.txt"))
dbh_dir <- "S:\\1845\\3\\03_MappingAnalysisData\\02_Data\\09_QC_GDB\\Scripts\\05_DBH_graphs\\height_dbh_csvs"
setwd(dbh_dir)
dbh_csv <- read.csv(paste0("result_",sp,"_FINAL.csv"))
View(dbh_csv)
readClipboard()
library(ggplot2) ; library(dplyr) ; library(patchwork)
dbh_dir <- "S:\\1845\\3\\03_MappingAnalysisData\\02_Data\\09_QC_GDB\\Scripts\\05_DBH_graphs\\height_dbh_csvs_withCA"
spp <- c('aw', 'pb', 'bw', 'fb', 'lt', 'pl', 'dp', 'sb', 'sw', 'sn')
setwd(dbh_dir)
if(!dir.exists("dbh_graphs_sample_colortest_R")){
dir.create("dbh_graphs_sample_colortest_R")
}
for(sp in spp){
start_time <- Sys.time()
print(paste0("Processing ",sp))
dbh_csv <- read.csv(paste0("result_",sp,"_FINAL.csv"))
dbh_csv$HEXID <- sapply(strsplit(dbh_csv$unique_id,"_"), `[`,1)
dbh_csv_subset <- dbh_csv
# create histogram and scatter plots for the species
xmin <- 5
xmax <- max(dbh_csv_subset$height)
# Histogram plot
plot1 <- ggplot(dbh_csv_subset, aes(x = height)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", boundary = xmin) +
xlim(xmin, xmax) +
labs(
x = "Height m",
y = "Count",
title = toupper(sp) %>% paste("Height Histogram and Height vs DBH Scatter Plot", sep = " ")
) +
theme_minimal()
# Scatter plot
plot2 <- ggplot(dbh_csv_subset, aes(x = height, y = canopyarea)) +
geom_point(size = 1, alpha = 0.1, color = "blue") +
xlim(xmin, xmax) +
labs(x = "Height m", y = "Canopy Area (m2)") +
theme_minimal()
# Combine the two plots vertically
combined_plot <- plot1 / plot2 + plot_layout(heights = c(3, 4))
# Print plot
#print(combined_plot)
# Construct output file path
output_file <- file.path("dbh_graphs_sample_colortest_R", paste0(sp, "_CA_HT_sample.png"))
# Save the combined plot
ggsave(
filename = output_file,
plot = combined_plot,
dpi = 150,
width = 8,
height = 12,
bg = "white"
)
end_time <- Sys.time()
duration <- end_time - start_time
print(duration)
}
zip
?zip
setwd(readClipboard())
folds <- list.files()
folds
zip("LAS_Classified_bySpecies.zip","LAS_Classified_bySpecies")
readClipboard()
dep_5C <- foreign::read.dbf("C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\West Fraser\\Area E - F11-F26-M01-F14-F01\\DEP\\setup\\DEP_5C.dbf")
unique(dep_5C$EP_CODE)
for(i in unique(dep_5C$EP_CODE)){print(paste0(i," : ",sum(dep_5C$EP_CODE == i)))}
library(forsite)
pDir <- readClipboard()
setwd(pDir)
folds <- list.files()
pinningPlots(pDir,1,overstory = 'DC',understory = 'DU',minHeight=1)
284.02+7.83
library(sf)
readClipboard()
missing_areas <- read_sf("C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\West Fraser\\Area E - F11-F26-M01-F14-F01\\DEP\\setup\\Missing_DEP_areas.shp")
readClipboard()
prodPolys <- read_sf("C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\West Fraser\\Area E - F11-F26-M01-F14-F01\\DEP\\setup2\\Model_Boundary_E1.shp")
joinedData <- st_join(missing_areas,prodPolys,join=st_intersects())
joinedData <- st_join(missing_areas,prodPolys,join=st_intersects
joinedData <- st_join(missing_areas,prodPolys,join=st_intersects)
missing_areas <- st_transform(missing_areas,st_crs(prodPolys))
joinedData <- st_join(missing_areas,prodPolys,join=st_intersects)
View(joinedData)
sum(unique(joinedData$PRODGRIDID))
length(unique(joinedData$PRODGRIDID))
unique(joinedData$PRODGRIDID)
sort(unique(joinedData$PRODGRIDID))
85*2.2
library(foreign)
setwd(readClipboard())
dbfFiles <- list.files(pattern="*.dbf")
dbfFiles
modelB_E2 <- read.dbf(dbfFiles[7])
modelB_E3 <- read.dbf(dbfFiles[8])
setwd("..")
setwd("setup2")
modelb_E1 <-= read.dbf("Model_Boundary_E1.dbf")
modelb_E1 <- read.dbf("Model_Boundary_E1.dbf")
View(modelb_E1)
sum(modelb_E1$PRODGRIDID %in% modelB_E2$PRODGRIDID)
sum(modelb_E1$PRODGRIDID %in% modelB_E3$PRODGRIDID)
sum(modelB_E2$PRODGRIDID %in% modelB_E3$PRODGRIDID)
View(modelb_E1)
View(modelB_E2)
readClipboard()
setwd("C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Fugro Land USA\\HydroOne\\AOI3_Kitchener\\SegCal\\_Buffered_LAZ")
lazFiles <- list.files(pattern="*.laz")
for(i in lazFiles){forsite::viewAllLAZ(i)}
library(foreign)
readClipboard()
dbf <- read.dbf("C:\\Users\\MichaelBurnett\\LiDAR Inventory group Dropbox\\Project Data\\OR\\Tolko\\Tolko_Sask\\FRI\\ML_12N_StandInventory.dbf")
colnames(dbf)
library(forsite)
pDir <- readClipboard()
setwd(pDir)
lazFiles <- list.files(pattern="*.laz")
lazFiles <- list.files(pattern="*.las")
for(i in lazFiles){viewAllLAZ(i)}
library(forsite)
setwd(readClipboard())
files <- list.files()
for(i in files){viewAllLAZ(i)}
187697/19
library(foreign)
parentDir <- readClipboard()
setwd(parentDir)
folders <- list.files()
fold <- folders[1]
setwd(fold)
initialShapes <- read.dbf(list.files(pattern="*InitialShapes.dbf")[1])
setwd("trees/approved")
full_df <- data.frame(["Trees","Height","Approved/Rejected"])
full_df <- data.frame(c("Trees","Height","Approved/Rejected")
full_df <- data.frame(c("Trees","Height","Approved/Rejected"))
View(full_df)
full_df <- data.frame(Tree = character(), Height = numeric(), ApprovedRejected = character())
View(full_df)
files <- list.files()
files
files <- gsub(".laz","",files)
files
temp_df <- data.frame(Tree = files)
View(temp_df)
temp_df <- data.frame(Tree = files, Height = initialShapes$HEIGHT[initialShapes$UNIQUE_ID == files],ApprovedRejected = "Approved")
matched_idx <- match(files, initialShapes$UNIQUE_ID)
View(initialShapes)
temp_df <- data.frame(Tree = files, Height = initialShapes$HEIGHT[initialShapes$GT_NAME == files],ApprovedRejected = "Approved")
matched_idx <- match(files, initialShapes$GT_NAME)
temp_df <- data.frame(Tree = files, Height = initialShapes$HEIGHT[matched_idx],ApprovedRejected = "Approved")
View(temp_df)
full_df <- rbind(full_df,temp_df)
setwd("..")
setwd("..")
app <- 'approved'
setwd(paste0("trees/",app))
files <- list.files()
files <- gsub(".laz","",files)
matched_idx <- match(files, initialShapes$GT_NAME)
temp_df <- data.frame(Tree = files, Height = initialShapes$HEIGHT[matched_idx],ApprovedRejected = "Approved")
full_df <- rbind(full_df,temp_df)
setwd("..")
setwd("..")
app <- 'rejected'
setwd(paste0("trees/",app))
files <- list.files()
files <- gsub(".laz","",files)
matched_idx <- match(files, initialShapes$GT_NAME)
temp_df <- data.frame(Tree = files, Height = initialShapes$HEIGHT[matched_idx],ApprovedRejected = "Approved")
full_df <- data.frame(Tree = character(), Height = numeric(), ApprovedRejected = character())
View(temp_df)
setwd(parentDir)
# Collect initial Shapes DBF to get heights
setwd(fold)
initialShapes <- read.dbf(list.files(pattern="*InitialShapes.dbf")[1])
for(app in c("approved","rejected")){
setwd(paste0("trees/",app))
files <- list.files()
files <- gsub(".laz","",files)
matched_idx <- match(files, initialShapes$GT_NAME)
temp_df <- data.frame(Tree = files, Height = initialShapes$HEIGHT[matched_idx],ApprovedRejected = app)
full_df <- rbind(full_df,temp_df)
setwd("..")
setwd("..")
}
View(full_df)
setwd(parentDir)
folders <- list.files()
full_df <- data.frame(Tree = character(), Height = numeric(), ApprovedRejected = character())
for(fold in folders){
# Collect initial Shapes DBF to get heights
setwd(fold)
initialShapes <- read.dbf(list.files(pattern="*InitialShapes.dbf")[1])
for(app in c("approved","rejected")){
setwd(paste0("trees/",app))
files <- list.files()
files <- gsub(".laz","",files)
matched_idx <- match(files, initialShapes$GT_NAME)
temp_df <- data.frame(Tree = files, Height = initialShapes$HEIGHT[matched_idx],ApprovedRejected = app)
full_df <- rbind(full_df,temp_df)
setwd("..")
setwd("..")
}
setwd(parentDir)
}
getwd()
folders <- folders[-"voxel"]
folders <- folders[folders != "voxel"]
full_df <- data.frame(Tree = character(), Height = numeric(), ApprovedRejected = character())
for(fold in folders){
# Collect initial Shapes DBF to get heights
setwd(fold)
initialShapes <- read.dbf(list.files(pattern="*InitialShapes.dbf")[1])
for(app in c("approved","rejected")){
setwd(paste0("trees/",app))
files <- list.files()
files <- gsub(".laz","",files)
matched_idx <- match(files, initialShapes$GT_NAME)
temp_df <- data.frame(Tree = files, Height = initialShapes$HEIGHT[matched_idx],ApprovedRejected = app)
full_df <- rbind(full_df,temp_df)
setwd("..")
setwd("..")
}
setwd(parentDir)
}
setwd(parentDir)
for(fold in folders){
# Collect initial Shapes DBF to get heights
setwd(fold)
initialShapes <- read.dbf(list.files(pattern="*InitialShapes.dbf")[1])
for(app in c("approved","rejected")){
setwd(paste0("trees/",app))
files <- list.files()
files <- gsub(".laz","",files)
matched_idx <- match(files, initialShapes$GT_NAME)
temp_df <- data.frame(Tree = files, Height = initialShapes$HEIGHT[matched_idx],ApprovedRejected = app)
full_df <- rbind(full_df,temp_df)
setwd("..")
setwd("..")
}
setwd(parentDir)
}
View(full_df)
rejected <- full_df[full_df$ApprovedRejected == "rejected"]
rejected <- full_df[full_df$ApprovedRejected == "rejected",]
approved <- full_df[full_df$ApprovedRejected == "approved",]
plot(rejected$Height)
hist(rejected$Height)
hist(rejected$Height, bins=50)
hist(rejected$Height, breaks=50)
hist(rejected$Height, breaks=50,xlab="Height (m)", main = "Histogram of Rejected Stems")
hist(approved$Height, breaks=50,xlab="Height (m)", main = "Histogram of Approved Stems")
hist(rejected$Height, breaks=50,xlab="Height (m)", main = "Histogram of Rejected Stems")
length(approved) / length(full_df)
length(approved)# / length(full_df)
nrow(approved) / nrow(full_df)
nrow(rejected) / nrow(full_df)
paste0(nrow(approved) / nrow(full_df) *100)
paste0(nrow(approved) / nrow(full_df) *100, "% of the stems were approved, while ",nrow(rejected) / nrow(full_df),"% of the stems were rejected")
hist(rejected$Height, breaks=50,xlab="Height (m)", main = "Histogram of Rejected Stems",ylim=c(0,100))
hist(rejected$Height, breaks=50,xlab="Height (m)", main = "Histogram of Rejected Stems",ylim=c(0,150))
hist(rejected$Height, breaks=50,xlab="Height (m)", main = "Histogram of Rejected Stems",ylim=c(0,120))
hist(approved$Height, breaks=50,xlab="Height (m)", main = "Histogram of Approved Stems",ylim=c(0,120))
# Create shared breaks to ensure both histograms align
breaks <- seq(min(c(approved$Height, rejected$Height), na.rm=TRUE),
max(c(approved$Height, rejected$Height), na.rm=TRUE),
length.out = 51)
# Compute histograms without plotting
hist_approved <- hist(approved$Height, breaks=breaks, plot=FALSE)
hist_rejected <- hist(rejected$Height, breaks=breaks, plot=FALSE)
# Find max count to set symmetric y-axis limits
max_count <- max(c(hist_approved$counts, hist_rejected$counts))
# Plot mirrored histogram
barplot(hist_approved$counts,
names.arg = round(hist_approved$mids, 1),
col = "green3",
ylim = c(-max_count, max_count),
xlab = "Height (m)",
ylab = "Frequency",
main = "Mirrored Histogram of Approved vs Rejected Stems",
space = 0)
# Add rejected data mirrored downward
barplot(-hist_rejected$counts,
col = "firebrick",
space = 0,
add = TRUE)
# Add legend
legend("topright", legend = c("Approved", "Rejected"), fill = c("green3", "firebrick"))
View(hist_approved)
library(lidR)
setwd(readClipboard())
bw_laz <- readLAS("Species_0000002.laz")
hist(bw_laz@data$Z)
library(forsite)
pDir <- readClipboard()
folds <- list.files()
pinningPlots(pDir,1)#,overstory="DE",understory="DE")
readClipboard()
readClipboard()
library(sf)
vaShp <- read_sf("C:\\Forsite\\WF_AreaF\\F1_testPlatform\\AreaF_Model_F1_All_VA_Stems_NEW_VA_ID_MORT_UN_UPDATE_20250604.shp")
prodPoly <- read_sf("C:\\Forsite\\WF_AreaF\\F1_testPlatform\\AreaE_ProductionPolys.shp")
st_crs(vaShp) <- st_crs(prodPoly)
joinedData <- st_join(vaShp,prodPoly,join=st_intersects)
prodGridID <- unique(joinedData$PRODGRIDID)
readClipboard()
batchLs <- list()
for(i in c(1:length(a))){
s <- a[i]
preL <- "aws s3 cp s3://can-ami-area-f-1845-7/Production/BILs_F1/"
epiL <- "_bil.zip C://Forsite//WF_AreaF//F1_testPlatform//raw//"
batchLs <- rbind(batchLs,paste0(preL,s,epiL))
preL <- "aws s3 cp s3://can-ami-area-f-1845-7/stage1/"
epiL <- "InitialShapes_s1.zip C://Forsite//WF_AreaF//F1_testPlatform//raw//"
batchLs <- rbind(batchLs,paste0(preL,s,epiL))
}
for(i in c(1:length(prodGridID))){
s <- prodGridID[i]
preL <- "aws s3 cp s3://can-ami-area-f-1845-7/Production/BILs_F1/"
epiL <- "_bil.zip C://Forsite//WF_AreaF//F1_testPlatform//raw//"
batchLs <- rbind(batchLs,paste0(preL,s,epiL))
preL <- "aws s3 cp s3://can-ami-area-f-1845-7/stage1/"
epiL <- "InitialShapes_s1.zip C://Forsite//WF_AreaF//F1_testPlatform//raw//"
batchLs <- rbind(batchLs,paste0(preL,s,epiL))
}
setwd(readClipboard())
write.csv(batchLs,"BatchForAWSF1.csv",row.names=F)
prodPoly <- read_sf("C:\\Forsite\\WF_AreaF\\F1_testPlatform\\AreaF_ProductionPolys.shp")
st_crs(vaShp) <- st_crs(prodPoly)
joinedData <- st_join(vaShp,prodPoly,join=st_intersects)
prodGridID <- unique(joinedData$PRODGRIDID)
batchLs <- list()
for(i in c(1:length(prodGridID))){
s <- prodGridID[i]
preL <- "aws s3 cp s3://can-ami-area-f-1845-7/Production/BILs_F1/"
epiL <- "_bil.zip C://Forsite//WF_AreaF//F1_testPlatform//raw//"
batchLs <- rbind(batchLs,paste0(preL,s,epiL))
preL <- "aws s3 cp s3://can-ami-area-f-1845-7/stage1/"
epiL <- "InitialShapes_s1.zip C://Forsite//WF_AreaF//F1_testPlatform//raw//"
batchLs <- rbind(batchLs,paste0(preL,s,epiL))
}
setwd(readClipboard())
write.csv(batchLs,"BatchForAWSF1.csv",row.names=F)
prodPoly <- read_sf("C:\\Forsite\\WF_AreaF\\F1_testPlatform\\AreaE_ProductionPolys.shp")
st_crs(vaShp) <- st_crs(prodPoly)
joinedData <- st_join(vaShp,prodPoly,join=st_intersects)
prodGridID <- unique(joinedData$PRODGRIDID)
batchLs <- list()
for(i in c(1:length(prodGridID))){
s <- prodGridID[i]
preL <- "aws s3 cp s3://can-ami-area-e-1845-8/Production/BILs_EinF1/"
epiL <- "_bil.zip C://Forsite//WF_AreaF//F1_testPlatform//raw//"
batchLs <- rbind(batchLs,paste0(preL,s,epiL))
preL <- "aws s3 cp s3://can-ami-area-e-1845-8/stage1/"
epiL <- "InitialShapes_s1.zip C://Forsite//WF_AreaF//F1_testPlatform//raw//"
batchLs <- rbind(batchLs,paste0(preL,s,epiL))
}
setwd(readClipboard())
write.csv(batchLs,"BatchForAWSF1.csv",row.names=F)
vaShp <- read_sf("C:\\Forsite\\WF_AreaF\\F1_testPlatform\\AreaF_Model_F1_All_VA_Stems_NEW_VA_ID_MORT_UN_UPDATE_20250604.shp")
prodPoly <- read_sf("C:\\Forsite\\WF_AreaF\\F1_testPlatform\\AreaF_ProductionPolys.shp")
st_crs(vaShp) <- st_crs(prodPoly)
joinedData <- st_join(vaShp,prodPoly,join=st_intersects)
prodGridID <- unique(joinedData$PRODGRIDID)
print(prodGridID)
which(prodGridID=="JL816")
setwd(readClipboard())
files <- list.files()
files
dbf <- foreign::read.dbf(files[16])
View(dbf)
unique(dbf$NEW_VA_ID)
sort(unique(dbf$NEW_VA_ID))
setwd(readClipboard())
csv <- read.csv(list.files()[1\])
csv <- read.csv(list.files()[1])
table(csv$X.2)
values <- tables(csv$X.2)
values <- table(csv$X.2)
values <- data.frame(table(csv$X.2)
values <- data.frame(table(csv$X.2))
View(values)
writeClipboard(values)
View(csv)
library(forsite)
setwd(readClipboard())
files <- list.files(pattern="*.las")
for(i in files){viewAllLAZ(i)}
for(i in files){viewAllLAZ(i)}
